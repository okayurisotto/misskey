import { z } from 'zod';
import { Injectable } from '@nestjs/common';
import { pick } from 'omick';
import { Endpoint } from '@/server/api/abstract-endpoint.js';
import { MetaService } from '@/core/MetaService.js';
import { DEFAULT_POLICIES } from '@/core/RoleService.js';
import { MisskeyIdSchema } from '@/models/zod/misc.js';
import { RolePoliciesSchema } from '@/models/zod/RolePoliciesSchema.js';
import { ConfigLoaderService } from '@/ConfigLoaderService.js';

const res = z.object({
	cacheRemoteFiles: z.boolean(),
	cacheRemoteSensitiveFiles: z.boolean(),
	emailRequiredForSignup: z.boolean(),
	enableHcaptcha: z.boolean(),
	hcaptchaSiteKey: z.string().nullable(),
	enableRecaptcha: z.boolean(),
	recaptchaSiteKey: z.string().nullable(),
	enableTurnstile: z.boolean(),
	turnstileSiteKey: z.string().nullable(),
	swPublickey: z.string().nullable(),
	mascotImageUrl: z.string().nullable().default('/assets/ai.png'),
	bannerUrl: z.string().nullable(),
	serverErrorImageUrl: z.string().nullable(),
	infoImageUrl: z.string().nullable(),
	notFoundImageUrl: z.string().nullable(),
	iconUrl: z.string().nullable(),
	enableEmail: z.boolean(),
	enableServiceWorker: z.boolean(),
	translatorAvailable: z.boolean(),
	userStarForReactionFallback: z.boolean().optional(),
	pinnedUsers: z.array(z.string()).optional(),
	hiddenTags: z.array(z.string()).optional(),
	blockedHosts: z.array(z.string()).optional(),
	sensitiveWords: z.array(z.string()).optional(),
	preservedUsernames: z.array(z.string()),
	hcaptchaSecretKey: z.string().nullable().optional(),
	recaptchaSecretKey: z.string().nullable().optional(),
	turnstileSecretKey: z.string().nullable().optional(),
	sensitiveMediaDetection: z.string().optional(),
	sensitiveMediaDetectionSensitivity: z.string().optional(),
	setSensitiveFlagAutomatically: z.boolean().optional(),
	enableSensitiveMediaDetectionForVideos: z.boolean().optional(),
	proxyAccountId: MisskeyIdSchema.nullable().optional(),
	summalyProxy: z.string().nullable().optional(),
	email: z.string().nullable().optional(),
	smtpSecure: z.boolean().optional(),
	smtpHost: z.string().nullable().optional(),
	smtpPort: z.number().nullable().optional(),
	smtpUser: z.string().nullable().optional(),
	smtpPass: z.string().nullable().optional(),
	swPrivateKey: z.string().nullable().optional(),
	useObjectStorage: z.boolean().optional(),
	objectStorageBaseUrl: z.string().nullable().optional(),
	objectStorageBucket: z.string().nullable().optional(),
	objectStoragePrefix: z.string().nullable().optional(),
	objectStorageEndpoint: z.string().nullable().optional(),
	objectStorageRegion: z.string().nullable().optional(),
	objectStoragePort: z.number().nullable().optional(),
	objectStorageAccessKey: z.string().nullable().optional(),
	objectStorageSecretKey: z.string().nullable().optional(),
	objectStorageUseSSL: z.boolean().optional(),
	objectStorageUseProxy: z.boolean().optional(),
	objectStorageSetPublicRead: z.boolean().optional(),
	enableIpLogging: z.boolean().optional(),
	enableActiveEmailValidation: z.boolean().optional(),
	enableChartsForRemoteUser: z.boolean(),
	enableChartsForFederatedInstances: z.boolean(),
	enableServerMachineStats: z.boolean(),
	enableIdenticonGeneration: z.boolean(),
	policies: z.unknown(),

	maintainerName: z.string().nullable(),
	maintainerEmail: z.string().nullable(),
	version: z.string(),
	name: z.string().nullable(),
	uri: z.string(),
	description: z.string().nullable(),
	langs: z.array(z.string()),
	tosUrl: z.string().nullable(),
	repositoryUrl: z.string(),
	feedbackUrl: z.string().nullable(),
	disableRegistration: z.boolean(),
	themeColor: z.string().nullable(),
	backgroundImageUrl: z.string().nullable(),
	logoImageUrl: z.string().nullable(),
	defaultLightTheme: z.string().nullable(),
	defaultDarkTheme: z.string().nullable(),
	objectStorageS3ForcePathStyle: z.boolean(),
	deeplAuthKey: z.string().nullable(),
	deeplIsPro: z.boolean(),
});
export const meta = {
	tags: ['meta'],
	requireCredential: true,
	requireAdmin: true,
	res,
} as const;

export const paramDef = z.object({});

@Injectable()
// eslint-disable-next-line import/no-default-export
export default class extends Endpoint<
	typeof meta,
	typeof paramDef,
	typeof res
> {
	constructor(
		private readonly configLoaderService: ConfigLoaderService,

		private readonly metaService: MetaService,
	) {
		super(meta, paramDef, async () => {
			const instance = await this.metaService.fetch();

			return {
				...pick(instance, [
					'maintainerName',
					'maintainerEmail',
					'name',
					'description',
					'langs',
					'repositoryUrl',
					'feedbackUrl',
					'disableRegistration',
					'emailRequiredForSignup',
					'enableHcaptcha',
					'hcaptchaSiteKey',
					'enableRecaptcha',
					'recaptchaSiteKey',
					'enableTurnstile',
					'turnstileSiteKey',
					'themeColor',
					'mascotImageUrl',
					'bannerUrl',
					'serverErrorImageUrl',
					'notFoundImageUrl',
					'infoImageUrl',
					'iconUrl',
					'backgroundImageUrl',
					'logoImageUrl',
					'defaultLightTheme',
					'defaultDarkTheme',
					'enableEmail',
					'enableServiceWorker',
					'cacheRemoteFiles',
					'cacheRemoteSensitiveFiles',
					'pinnedUsers',
					'hiddenTags',
					'blockedHosts',
					'sensitiveWords',
					'preservedUsernames',
					'hcaptchaSecretKey',
					'recaptchaSecretKey',
					'turnstileSecretKey',
					'sensitiveMediaDetection',
					'sensitiveMediaDetectionSensitivity',
					'setSensitiveFlagAutomatically',
					'enableSensitiveMediaDetectionForVideos',
					'proxyAccountId',
					'summalyProxy',
					'email',
					'smtpSecure',
					'smtpHost',
					'smtpPort',
					'smtpUser',
					'smtpPass',
					'swPrivateKey',
					'useObjectStorage',
					'objectStorageBaseUrl',
					'objectStorageBucket',
					'objectStoragePrefix',
					'objectStorageEndpoint',
					'objectStorageRegion',
					'objectStoragePort',
					'objectStorageAccessKey',
					'objectStorageSecretKey',
					'objectStorageUseSSL',
					'objectStorageUseProxy',
					'objectStorageSetPublicRead',
					'objectStorageS3ForcePathStyle',
					'deeplAuthKey',
					'deeplIsPro',
					'enableIpLogging',
					'enableActiveEmailValidation',
					'enableChartsForRemoteUser',
					'enableChartsForFederatedInstances',
					'enableServerMachineStats',
					'enableIdenticonGeneration',
				]),
				swPublickey: instance.swPublicKey, // 大文字小文字の違いがある
				tosUrl: instance.termsOfServiceUrl,
				translatorAvailable: instance.deeplAuthKey !== null,
				uri: this.configLoaderService.data.url,
				version: this.configLoaderService.data.version,
				policies: {
					...DEFAULT_POLICIES,
					...RolePoliciesSchema.parse(instance.policies),
				},
			};
		});
	}
}
