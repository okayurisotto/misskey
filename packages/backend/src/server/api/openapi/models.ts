import { OpenApiZod } from 'zod2spec/built/type.js';
import {
	AbuseUserReportSchema,
	AdSchema,
	AntennaSchema,
	AppSchema,
	BirthdaySchema,
	BlockingSchema,
	ChannelSchema,
	ClipSchema,
	DescriptionSchema,
	DriveFileSchema,
	DriveFolderSchema,
	EmojiDetailedSchema,
	EmojiSimpleSchema,
	ExportedAntennaSchema,
	FederationInstanceSchema,
	FlashSchema,
	FollowingSchema,
	GalleryPostSchema,
	HashtagSchema,
	InviteCodeSchema,
	LocalUsernameSchema,
	LocationSchema,
	MD5Schema,
	MeDetailedOnlySchema,
	MeDetailedSchema,
	MisskeyIdSchema,
	MutingSchema,
	NameSchema,
	NoteFavoriteSchema,
	NoteReactionSchema,
	NoteSchema,
	NotificationSchema,
	PageContentSchema,
	PageSchema,
	PasswordSchema,
	QueueCountSchema,
	RenoteMutingSchema,
	RoleCondFormulaValueSchema,
	RolePoliciesSchema,
	RoleSchema,
	UserDetailedNotMeOnlySchema,
	UserDetailedNotMeSchema,
	UserDetailedSchema,
	UserListSchema,
	UserLiteSchema,
	UserSchema,
} from '@/models/zod/index.js';

export const models = [
	{ key: 'AbuseUserReport', schema: AbuseUserReportSchema },
	{ key: 'Ad', schema: AdSchema },
	{ key: 'Antenna', schema: AntennaSchema },
	{ key: 'App', schema: AppSchema },
	{ key: 'Birthday', schema: BirthdaySchema },
	{ key: 'Blocking', schema: BlockingSchema },
	{ key: 'Channel', schema: ChannelSchema },
	{ key: 'Clip', schema: ClipSchema },
	{ key: 'Description', schema: DescriptionSchema },
	{ key: 'DriveFile', schema: DriveFileSchema },
	{ key: 'DriveFolder', schema: DriveFolderSchema },
	{ key: 'EmojiDetailed', schema: EmojiDetailedSchema },
	{ key: 'EmojiSimple', schema: EmojiSimpleSchema },
	{ key: 'ExportedAntenna', schema: ExportedAntennaSchema },
	{ key: 'FederationInstance', schema: FederationInstanceSchema },
	{ key: 'Flash', schema: FlashSchema },
	{ key: 'Following', schema: FollowingSchema },
	{ key: 'GalleryPost', schema: GalleryPostSchema },
	{ key: 'Hashtag', schema: HashtagSchema },
	{ key: 'InviteCode', schema: InviteCodeSchema },
	{ key: 'LocalUsername', schema: LocalUsernameSchema },
	{ key: 'Location', schema: LocationSchema },
	{ key: 'MD5', schema: MD5Schema },
	{ key: 'MeDetailed', schema: MeDetailedSchema },
	{ key: 'MeDetailedOnly', schema: MeDetailedOnlySchema },
	{ key: 'MisskeyId', schema: MisskeyIdSchema },
	{ key: 'Muting', schema: MutingSchema },
	{ key: 'Name', schema: NameSchema },
	{ key: 'Note', schema: NoteSchema },
	{ key: 'NoteFavorite', schema: NoteFavoriteSchema },
	{ key: 'NoteReaction', schema: NoteReactionSchema },
	{ key: 'Notification', schema: NotificationSchema },
	{ key: 'Page', schema: PageSchema },
	{ key: 'PageContent', schema: PageContentSchema },
	{ key: 'Password', schema: PasswordSchema },
	{ key: 'QueueCount', schema: QueueCountSchema },
	{ key: 'RenoteMuting', schema: RenoteMutingSchema },
	{ key: 'Role', schema: RoleSchema },
	{ key: 'RoleCondFormulaValue', schema: RoleCondFormulaValueSchema },
	{ key: 'RolePolicies', schema: RolePoliciesSchema },
	{ key: 'User', schema: UserSchema },
	{ key: 'UserDetailed', schema: UserDetailedSchema },
	{ key: 'UserDetailedNotMe', schema: UserDetailedNotMeSchema },
	{ key: 'UserDetailedNotMeOnly', schema: UserDetailedNotMeOnlySchema },
	{ key: 'UserList', schema: UserListSchema },
	{ key: 'UserLite', schema: UserLiteSchema },
] as { key: string; schema: OpenApiZod }[]; // VS Code上では型エラーにならないが`typecheck`したときにはエラーとして出力されてしまうため、`as`で黙らせている
