/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/admin/meta": {
    /**
     * admin/meta
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/meta"];
  };
  "/admin/abuse-user-reports": {
    /**
     * admin/abuse-user-reports
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/abuse-user-reports"];
  };
  "/admin/accounts/create": {
    /**
     * admin/accounts/create
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["admin/accounts/create"];
  };
  "/admin/accounts/delete": {
    /**
     * admin/accounts/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/accounts/delete"];
  };
  "/admin/ad/create": {
    /**
     * admin/ad/create
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/ad/create"];
  };
  "/admin/ad/delete": {
    /**
     * admin/ad/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/ad/delete"];
  };
  "/admin/ad/list": {
    /**
     * admin/ad/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/ad/list"];
  };
  "/admin/ad/update": {
    /**
     * admin/ad/update
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/ad/update"];
  };
  "/admin/announcements/create": {
    /**
     * admin/announcements/create
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/announcements/create"];
  };
  "/admin/announcements/delete": {
    /**
     * admin/announcements/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/announcements/delete"];
  };
  "/admin/announcements/list": {
    /**
     * admin/announcements/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/announcements/list"];
  };
  "/admin/announcements/update": {
    /**
     * admin/announcements/update
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/announcements/update"];
  };
  "/admin/delete-all-files-of-a-user": {
    /**
     * admin/delete-all-files-of-a-user
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/delete-all-files-of-a-user"];
  };
  "/admin/drive/clean-remote-files": {
    /**
     * admin/drive/clean-remote-files
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/drive/clean-remote-files"];
  };
  "/admin/drive/cleanup": {
    /**
     * admin/drive/cleanup
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/drive/cleanup"];
  };
  "/admin/drive/files": {
    /**
     * admin/drive/files
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/drive/files"];
  };
  "/admin/drive/show-file": {
    /**
     * admin/drive/show-file
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/drive/show-file"];
  };
  "/admin/emoji/add-aliases-bulk": {
    /**
     * admin/emoji/add-aliases-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/add-aliases-bulk"];
  };
  "/admin/emoji/add": {
    /**
     * admin/emoji/add
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/add"];
  };
  "/admin/emoji/copy": {
    /**
     * admin/emoji/copy
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/copy"];
  };
  "/admin/emoji/delete-bulk": {
    /**
     * admin/emoji/delete-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/delete-bulk"];
  };
  "/admin/emoji/delete": {
    /**
     * admin/emoji/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/delete"];
  };
  "/admin/emoji/list-remote": {
    /**
     * admin/emoji/list-remote
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/list-remote"];
  };
  "/admin/emoji/list": {
    /**
     * admin/emoji/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/list"];
  };
  "/admin/emoji/remove-aliases-bulk": {
    /**
     * admin/emoji/remove-aliases-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/remove-aliases-bulk"];
  };
  "/admin/emoji/set-aliases-bulk": {
    /**
     * admin/emoji/set-aliases-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/set-aliases-bulk"];
  };
  "/admin/emoji/set-category-bulk": {
    /**
     * admin/emoji/set-category-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/set-category-bulk"];
  };
  "/admin/emoji/set-license-bulk": {
    /**
     * admin/emoji/set-license-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/set-license-bulk"];
  };
  "/admin/emoji/update": {
    /**
     * admin/emoji/update
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/emoji/update"];
  };
  "/admin/federation/delete-all-files": {
    /**
     * admin/federation/delete-all-files
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/federation/delete-all-files"];
  };
  "/admin/federation/refresh-remote-instance-metadata": {
    /**
     * admin/federation/refresh-remote-instance-metadata
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/federation/refresh-remote-instance-metadata"];
  };
  "/admin/federation/remove-all-following": {
    /**
     * admin/federation/remove-all-following
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/federation/remove-all-following"];
  };
  "/admin/federation/update-instance": {
    /**
     * admin/federation/update-instance
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/federation/update-instance"];
  };
  "/admin/get-index-stats": {
    /**
     * admin/get-index-stats
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/get-index-stats"];
  };
  "/admin/get-table-stats": {
    /**
     * admin/get-table-stats
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/get-table-stats"];
  };
  "/admin/get-user-ips": {
    /**
     * admin/get-user-ips
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/get-user-ips"];
  };
  "/admin/invite/create": {
    /**
     * admin/invite/create
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/invite/create"];
  };
  "/admin/invite/list": {
    /**
     * admin/invite/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/invite/list"];
  };
  "/admin/promo/create": {
    /**
     * admin/promo/create
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/promo/create"];
  };
  "/admin/queue/clear": {
    /**
     * admin/queue/clear
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/queue/clear"];
  };
  "/admin/queue/deliver-delayed": {
    /**
     * admin/queue/deliver-delayed
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/queue/deliver-delayed"];
  };
  "/admin/queue/inbox-delayed": {
    /**
     * admin/queue/inbox-delayed
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/queue/inbox-delayed"];
  };
  "/admin/queue/promote": {
    /**
     * admin/queue/promote
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/queue/promote"];
  };
  "/admin/queue/stats": {
    /**
     * admin/queue/stats
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/queue/stats"];
  };
  "/admin/relays/add": {
    /**
     * admin/relays/add
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/relays/add"];
  };
  "/admin/relays/list": {
    /**
     * admin/relays/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/relays/list"];
  };
  "/admin/relays/remove": {
    /**
     * admin/relays/remove
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/relays/remove"];
  };
  "/admin/reset-password": {
    /**
     * admin/reset-password
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/reset-password"];
  };
  "/admin/resolve-abuse-user-report": {
    /**
     * admin/resolve-abuse-user-report
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/resolve-abuse-user-report"];
  };
  "/admin/send-email": {
    /**
     * admin/send-email
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/send-email"];
  };
  "/admin/server-info": {
    /**
     * admin/server-info
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/server-info"];
  };
  "/admin/show-moderation-logs": {
    /**
     * admin/show-moderation-logs
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/show-moderation-logs"];
  };
  "/admin/show-user": {
    /**
     * admin/show-user
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/show-user"];
  };
  "/admin/show-users": {
    /**
     * admin/show-users
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/show-users"];
  };
  "/admin/suspend-user": {
    /**
     * admin/suspend-user
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/suspend-user"];
  };
  "/admin/unsuspend-user": {
    /**
     * admin/unsuspend-user
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/unsuspend-user"];
  };
  "/admin/update-meta": {
    /**
     * admin/update-meta
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/update-meta"];
  };
  "/admin/delete-account": {
    /**
     * admin/delete-account
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/delete-account"];
  };
  "/admin/update-user-note": {
    /**
     * admin/update-user-note
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/update-user-note"];
  };
  "/admin/roles/create": {
    /**
     * admin/roles/create
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/create"];
  };
  "/admin/roles/delete": {
    /**
     * admin/roles/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/delete"];
  };
  "/admin/roles/list": {
    /**
     * admin/roles/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/list"];
  };
  "/admin/roles/show": {
    /**
     * admin/roles/show
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/show"];
  };
  "/admin/roles/update": {
    /**
     * admin/roles/update
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/update"];
  };
  "/admin/roles/assign": {
    /**
     * admin/roles/assign
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/assign"];
  };
  "/admin/roles/unassign": {
    /**
     * admin/roles/unassign
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/unassign"];
  };
  "/admin/roles/update-default-policies": {
    /**
     * admin/roles/update-default-policies
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["admin/roles/update-default-policies"];
  };
  "/admin/roles/users": {
    /**
     * admin/roles/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["admin/roles/users"];
  };
  "/announcements": {
    /**
     * announcements
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["announcements"];
  };
  "/antennas/create": {
    /**
     * antennas/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["antennas/create"];
  };
  "/antennas/delete": {
    /**
     * antennas/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["antennas/delete"];
  };
  "/antennas/list": {
    /**
     * antennas/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["antennas/list"];
  };
  "/antennas/notes": {
    /**
     * antennas/notes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["antennas/notes"];
  };
  "/antennas/show": {
    /**
     * antennas/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["antennas/show"];
  };
  "/antennas/update": {
    /**
     * antennas/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["antennas/update"];
  };
  "/ap/get": {
    /**
     * ap/get
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["ap/get"];
  };
  "/ap/show": {
    /**
     * ap/show
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["ap/show"];
  };
  "/app/create": {
    /**
     * app/create
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["app/create"];
  };
  "/app/show": {
    /**
     * app/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["app/show"];
  };
  "/auth/session/generate": {
    /**
     * auth/session/generate
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["auth/session/generate"];
  };
  "/auth/session/show": {
    /**
     * auth/session/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["auth/session/show"];
  };
  "/auth/session/userkey": {
    /**
     * auth/session/userkey
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["auth/session/userkey"];
  };
  "/blocking/create": {
    /**
     * blocking/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:blocks*
     */
    post: operations["blocking/create"];
  };
  "/blocking/delete": {
    /**
     * blocking/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:blocks*
     */
    post: operations["blocking/delete"];
  };
  "/blocking/list": {
    /**
     * blocking/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:blocks*
     */
    post: operations["blocking/list"];
  };
  "/channels/create": {
    /**
     * channels/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations["channels/create"];
  };
  "/channels/featured": {
    /**
     * channels/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["channels/featured"];
  };
  "/channels/follow": {
    /**
     * channels/follow
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations["channels/follow"];
  };
  "/channels/followed": {
    /**
     * channels/followed
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:channels*
     */
    post: operations["channels/followed"];
  };
  "/channels/owned": {
    /**
     * channels/owned
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:channels*
     */
    post: operations["channels/owned"];
  };
  "/channels/show": {
    /**
     * channels/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["channels/show"];
  };
  "/channels/timeline": {
    /**
     * channels/timeline
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["channels/timeline"];
  };
  "/channels/unfollow": {
    /**
     * channels/unfollow
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations["channels/unfollow"];
  };
  "/channels/update": {
    /**
     * channels/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations["channels/update"];
  };
  "/channels/favorite": {
    /**
     * channels/favorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations["channels/favorite"];
  };
  "/channels/unfavorite": {
    /**
     * channels/unfavorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations["channels/unfavorite"];
  };
  "/channels/my-favorites": {
    /**
     * channels/my-favorites
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:channels*
     */
    post: operations["channels/my-favorites"];
  };
  "/channels/search": {
    /**
     * channels/search
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["channels/search"];
  };
  "/charts/active-users": {
    /**
     * charts/active-users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/active-users"];
  };
  "/charts/ap-request": {
    /**
     * charts/ap-request
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/ap-request"];
  };
  "/charts/drive": {
    /**
     * charts/drive
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/drive"];
  };
  "/charts/federation": {
    /**
     * charts/federation
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/federation"];
  };
  "/charts/instance": {
    /**
     * charts/instance
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/instance"];
  };
  "/charts/notes": {
    /**
     * charts/notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/notes"];
  };
  "/charts/user/drive": {
    /**
     * charts/user/drive
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/user/drive"];
  };
  "/charts/user/following": {
    /**
     * charts/user/following
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/user/following"];
  };
  "/charts/user/notes": {
    /**
     * charts/user/notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/user/notes"];
  };
  "/charts/user/pv": {
    /**
     * charts/user/pv
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/user/pv"];
  };
  "/charts/user/reactions": {
    /**
     * charts/user/reactions
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/user/reactions"];
  };
  "/charts/users": {
    /**
     * charts/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["charts/users"];
  };
  "/clips/add-note": {
    /**
     * clips/add-note
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["clips/add-note"];
  };
  "/clips/remove-note": {
    /**
     * clips/remove-note
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["clips/remove-note"];
  };
  "/clips/create": {
    /**
     * clips/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["clips/create"];
  };
  "/clips/delete": {
    /**
     * clips/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["clips/delete"];
  };
  "/clips/list": {
    /**
     * clips/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["clips/list"];
  };
  "/clips/notes": {
    /**
     * clips/notes
     * @description No description provided.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations["clips/notes"];
  };
  "/clips/show": {
    /**
     * clips/show
     * @description No description provided.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations["clips/show"];
  };
  "/clips/update": {
    /**
     * clips/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["clips/update"];
  };
  "/clips/favorite": {
    /**
     * clips/favorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
     */
    post: operations["clips/favorite"];
  };
  "/clips/unfavorite": {
    /**
     * clips/unfavorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
     */
    post: operations["clips/unfavorite"];
  };
  "/clips/my-favorites": {
    /**
     * clips/my-favorites
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:clip-favorite*
     */
    post: operations["clips/my-favorites"];
  };
  "/drive": {
    /**
     * drive
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive"];
  };
  "/drive/files": {
    /**
     * drive/files
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/files"];
  };
  "/drive/files/attached-notes": {
    /**
     * drive/files/attached-notes
     * @description Find the notes to which the given file is attached.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/files/attached-notes"];
  };
  "/drive/files/check-existence": {
    /**
     * drive/files/check-existence
     * @description Check if a given file exists.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/files/check-existence"];
  };
  "/drive/files/create": {
    /**
     * drive/files/create
     * @description Upload a new drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations["drive/files/create"];
  };
  "/drive/files/delete": {
    /**
     * drive/files/delete
     * @description Delete an existing drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations["drive/files/delete"];
  };
  "/drive/files/find-by-hash": {
    /**
     * drive/files/find-by-hash
     * @description Search for a drive file by a hash of the contents.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/files/find-by-hash"];
  };
  "/drive/files/find": {
    /**
     * drive/files/find
     * @description Search for a drive file by the given parameters.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/files/find"];
  };
  "/drive/files/show": {
    /**
     * drive/files/show
     * @description Show the properties of a drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/files/show"];
  };
  "/drive/files/update": {
    /**
     * drive/files/update
     * @description Update the properties of a drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations["drive/files/update"];
  };
  "/drive/files/upload-from-url": {
    /**
     * drive/files/upload-from-url
     * @description Request the server to download a new drive file from the specified URL.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations["drive/files/upload-from-url"];
  };
  "/drive/folders": {
    /**
     * drive/folders
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/folders"];
  };
  "/drive/folders/create": {
    /**
     * drive/folders/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations["drive/folders/create"];
  };
  "/drive/folders/delete": {
    /**
     * drive/folders/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations["drive/folders/delete"];
  };
  "/drive/folders/find": {
    /**
     * drive/folders/find
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/folders/find"];
  };
  "/drive/folders/show": {
    /**
     * drive/folders/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/folders/show"];
  };
  "/drive/folders/update": {
    /**
     * drive/folders/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations["drive/folders/update"];
  };
  "/drive/stream": {
    /**
     * drive/stream
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations["drive/stream"];
  };
  "/email-address/available": {
    /**
     * email-address/available
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["email-address/available"];
  };
  "/endpoint": {
    /**
     * endpoint
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["endpoint"];
  };
  "/endpoints": {
    /**
     * endpoints
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["endpoints"];
  };
  "/federation/followers": {
    /**
     * federation/followers
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["federation/followers"];
  };
  "/federation/following": {
    /**
     * federation/following
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["federation/following"];
  };
  "/federation/instances": {
    /**
     * federation/instances
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["federation/instances"];
  };
  "/federation/show-instance": {
    /**
     * federation/show-instance
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["federation/show-instance"];
  };
  "/federation/update-remote-user": {
    /**
     * federation/update-remote-user
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["federation/update-remote-user"];
  };
  "/federation/users": {
    /**
     * federation/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["federation/users"];
  };
  "/federation/stats": {
    /**
     * federation/stats
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["federation/stats"];
  };
  "/following/create": {
    /**
     * following/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations["following/create"];
  };
  "/following/delete": {
    /**
     * following/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations["following/delete"];
  };
  "/following/invalidate": {
    /**
     * following/invalidate
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations["following/invalidate"];
  };
  "/following/requests/accept": {
    /**
     * following/requests/accept
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations["following/requests/accept"];
  };
  "/following/requests/cancel": {
    /**
     * following/requests/cancel
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations["following/requests/cancel"];
  };
  "/following/requests/list": {
    /**
     * following/requests/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:following*
     */
    post: operations["following/requests/list"];
  };
  "/following/requests/reject": {
    /**
     * following/requests/reject
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations["following/requests/reject"];
  };
  "/gallery/featured": {
    /**
     * gallery/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["gallery/featured"];
  };
  "/gallery/popular": {
    /**
     * gallery/popular
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["gallery/popular"];
  };
  "/gallery/posts": {
    /**
     * gallery/posts
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["gallery/posts"];
  };
  "/gallery/posts/create": {
    /**
     * gallery/posts/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery*
     */
    post: operations["gallery/posts/create"];
  };
  "/gallery/posts/delete": {
    /**
     * gallery/posts/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery*
     */
    post: operations["gallery/posts/delete"];
  };
  "/gallery/posts/like": {
    /**
     * gallery/posts/like
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
     */
    post: operations["gallery/posts/like"];
  };
  "/gallery/posts/show": {
    /**
     * gallery/posts/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["gallery/posts/show"];
  };
  "/gallery/posts/unlike": {
    /**
     * gallery/posts/unlike
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
     */
    post: operations["gallery/posts/unlike"];
  };
  "/gallery/posts/update": {
    /**
     * gallery/posts/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery*
     */
    post: operations["gallery/posts/update"];
  };
  "/get-online-users-count": {
    /**
     * get-online-users-count
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["get-online-users-count"];
  };
  "/hashtags/list": {
    /**
     * hashtags/list
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["hashtags/list"];
  };
  "/hashtags/search": {
    /**
     * hashtags/search
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["hashtags/search"];
  };
  "/hashtags/show": {
    /**
     * hashtags/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["hashtags/show"];
  };
  "/hashtags/trend": {
    /**
     * hashtags/trend
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["hashtags/trend"];
  };
  "/hashtags/users": {
    /**
     * hashtags/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["hashtags/users"];
  };
  "/i": {
    /**
     * i
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["i"];
  };
  "/i/claim-achievement": {
    /**
     * i/claim-achievement
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["i/claim-achievement"];
  };
  "/i/favorites": {
    /**
     * i/favorites
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:favorites*
     */
    post: operations["i/favorites"];
  };
  "/i/gallery/likes": {
    /**
     * i/gallery/likes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:gallery-likes*
     */
    post: operations["i/gallery/likes"];
  };
  "/i/gallery/posts": {
    /**
     * i/gallery/posts
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:gallery*
     */
    post: operations["i/gallery/posts"];
  };
  "/i/get-word-muted-notes-count": {
    /**
     * i/get-word-muted-notes-count
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["i/get-word-muted-notes-count"];
  };
  "/i/notifications": {
    /**
     * i/notifications
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:notifications*
     */
    post: operations["i/notifications"];
  };
  "/i/page-likes": {
    /**
     * i/page-likes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:page-likes*
     */
    post: operations["i/page-likes"];
  };
  "/i/pages": {
    /**
     * i/pages
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:pages*
     */
    post: operations["i/pages"];
  };
  "/i/pin": {
    /**
     * i/pin
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/pin"];
  };
  "/i/read-all-unread-notes": {
    /**
     * i/read-all-unread-notes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/read-all-unread-notes"];
  };
  "/i/read-announcement": {
    /**
     * i/read-announcement
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/read-announcement"];
  };
  "/i/unpin": {
    /**
     * i/unpin
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/unpin"];
  };
  "/i/update": {
    /**
     * i/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/update"];
  };
  "/i/webhooks/create": {
    /**
     * i/webhooks/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/webhooks/create"];
  };
  "/i/webhooks/list": {
    /**
     * i/webhooks/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["i/webhooks/list"];
  };
  "/i/webhooks/show": {
    /**
     * i/webhooks/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["i/webhooks/show"];
  };
  "/i/webhooks/update": {
    /**
     * i/webhooks/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/webhooks/update"];
  };
  "/i/webhooks/delete": {
    /**
     * i/webhooks/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["i/webhooks/delete"];
  };
  "/invite/create": {
    /**
     * invite/create
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["invite/create"];
  };
  "/invite/delete": {
    /**
     * invite/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["invite/delete"];
  };
  "/invite/list": {
    /**
     * invite/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["invite/list"];
  };
  "/invite/limit": {
    /**
     * invite/limit
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["invite/limit"];
  };
  "/meta": {
    /**
     * meta
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["meta"];
  };
  "/emojis": {
    /**
     * emojis
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["emojis"];
  };
  "/emoji": {
    /**
     * emoji
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["emoji"];
  };
  "/mute/create": {
    /**
     * mute/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations["mute/create"];
  };
  "/mute/delete": {
    /**
     * mute/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations["mute/delete"];
  };
  "/mute/list": {
    /**
     * mute/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:mutes*
     */
    post: operations["mute/list"];
  };
  "/renote-mute/create": {
    /**
     * renote-mute/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations["renote-mute/create"];
  };
  "/renote-mute/delete": {
    /**
     * renote-mute/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations["renote-mute/delete"];
  };
  "/renote-mute/list": {
    /**
     * renote-mute/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:mutes*
     */
    post: operations["renote-mute/list"];
  };
  "/my/apps": {
    /**
     * my/apps
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["my/apps"];
  };
  "/notes": {
    /**
     * notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes"];
  };
  "/notes/children": {
    /**
     * notes/children
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/children"];
  };
  "/notes/clips": {
    /**
     * notes/clips
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/clips"];
  };
  "/notes/conversation": {
    /**
     * notes/conversation
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/conversation"];
  };
  "/notes/create": {
    /**
     * notes/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notes*
     */
    post: operations["notes/create"];
  };
  "/notes/delete": {
    /**
     * notes/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notes*
     */
    post: operations["notes/delete"];
  };
  "/notes/favorites/create": {
    /**
     * notes/favorites/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:favorites*
     */
    post: operations["notes/favorites/create"];
  };
  "/notes/favorites/delete": {
    /**
     * notes/favorites/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:favorites*
     */
    post: operations["notes/favorites/delete"];
  };
  "/notes/featured": {
    /**
     * notes/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/featured"];
  };
  "/notes/global-timeline": {
    /**
     * notes/global-timeline
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/global-timeline"];
  };
  "/notes/hybrid-timeline": {
    /**
     * notes/hybrid-timeline
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["notes/hybrid-timeline"];
  };
  "/notes/local-timeline": {
    /**
     * notes/local-timeline
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/local-timeline"];
  };
  "/notes/mentions": {
    /**
     * notes/mentions
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["notes/mentions"];
  };
  "/notes/polls/recommendation": {
    /**
     * notes/polls/recommendation
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["notes/polls/recommendation"];
  };
  "/notes/polls/vote": {
    /**
     * notes/polls/vote
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:votes*
     */
    post: operations["notes/polls/vote"];
  };
  "/notes/reactions": {
    /**
     * notes/reactions
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/reactions"];
  };
  "/notes/reactions/create": {
    /**
     * notes/reactions/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:reactions*
     */
    post: operations["notes/reactions/create"];
  };
  "/notes/reactions/delete": {
    /**
     * notes/reactions/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:reactions*
     */
    post: operations["notes/reactions/delete"];
  };
  "/notes/renotes": {
    /**
     * notes/renotes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/renotes"];
  };
  "/notes/replies": {
    /**
     * notes/replies
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/replies"];
  };
  "/notes/search-by-tag": {
    /**
     * notes/search-by-tag
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/search-by-tag"];
  };
  "/notes/search": {
    /**
     * notes/search
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/search"];
  };
  "/notes/show": {
    /**
     * notes/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/show"];
  };
  "/notes/state": {
    /**
     * notes/state
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["notes/state"];
  };
  "/notes/thread-muting/create": {
    /**
     * notes/thread-muting/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["notes/thread-muting/create"];
  };
  "/notes/thread-muting/delete": {
    /**
     * notes/thread-muting/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["notes/thread-muting/delete"];
  };
  "/notes/timeline": {
    /**
     * notes/timeline
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["notes/timeline"];
  };
  "/notes/translate": {
    /**
     * notes/translate
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["notes/translate"];
  };
  "/notes/unrenote": {
    /**
     * notes/unrenote
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notes*
     */
    post: operations["notes/unrenote"];
  };
  "/notes/user-list-timeline": {
    /**
     * notes/user-list-timeline
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["notes/user-list-timeline"];
  };
  "/notifications/create": {
    /**
     * notifications/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notifications*
     */
    post: operations["notifications/create"];
  };
  "/notifications/mark-all-as-read": {
    /**
     * notifications/mark-all-as-read
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notifications*
     */
    post: operations["notifications/mark-all-as-read"];
  };
  "/pages/create": {
    /**
     * pages/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:pages*
     */
    post: operations["pages/create"];
  };
  "/pages/delete": {
    /**
     * pages/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:pages*
     */
    post: operations["pages/delete"];
  };
  "/pages/featured": {
    /**
     * pages/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["pages/featured"];
  };
  "/pages/like": {
    /**
     * pages/like
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:page-likes*
     */
    post: operations["pages/like"];
  };
  "/pages/show": {
    /**
     * pages/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["pages/show"];
  };
  "/pages/unlike": {
    /**
     * pages/unlike
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:page-likes*
     */
    post: operations["pages/unlike"];
  };
  "/pages/update": {
    /**
     * pages/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:pages*
     */
    post: operations["pages/update"];
  };
  "/flash/create": {
    /**
     * flash/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash*
     */
    post: operations["flash/create"];
  };
  "/flash/delete": {
    /**
     * flash/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash*
     */
    post: operations["flash/delete"];
  };
  "/flash/featured": {
    /**
     * flash/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["flash/featured"];
  };
  "/flash/like": {
    /**
     * flash/like
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
     */
    post: operations["flash/like"];
  };
  "/flash/show": {
    /**
     * flash/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["flash/show"];
  };
  "/flash/unlike": {
    /**
     * flash/unlike
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
     */
    post: operations["flash/unlike"];
  };
  "/flash/update": {
    /**
     * flash/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash*
     */
    post: operations["flash/update"];
  };
  "/flash/my": {
    /**
     * flash/my
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:flash*
     */
    post: operations["flash/my"];
  };
  "/flash/my-likes": {
    /**
     * flash/my-likes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:flash-likes*
     */
    post: operations["flash/my-likes"];
  };
  "/ping": {
    /**
     * ping
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["ping"];
  };
  "/pinned-users": {
    /**
     * pinned-users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["pinned-users"];
  };
  "/promo/read": {
    /**
     * promo/read
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["promo/read"];
  };
  "/roles/list": {
    /**
     * roles/list
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["roles/list"];
  };
  "/roles/show": {
    /**
     * roles/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["roles/show"];
  };
  "/roles/users": {
    /**
     * roles/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["roles/users"];
  };
  "/roles/notes": {
    /**
     * roles/notes
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["roles/notes"];
  };
  "/request-reset-password": {
    /**
     * request-reset-password
     * @description Request a users password to be reset.
     *
     * **Credential required**: *No*
     */
    post: operations["request-reset-password"];
  };
  "/reset-db": {
    /**
     * reset-db
     * @description Only available when running with <code>NODE_ENV=testing</code>. Reset the database and flush Redis.
     *
     * **Credential required**: *No*
     */
    post: operations["reset-db"];
  };
  "/reset-password": {
    /**
     * reset-password
     * @description Complete the password reset that was previously requested.
     *
     * **Credential required**: *No*
     */
    post: operations["reset-password"];
  };
  "/server-info": {
    /**
     * server-info
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["server-info"];
  };
  "/stats": {
    /**
     * stats
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["stats"];
  };
  "/sw/show-registration": {
    /**
     * sw/show-registration
     * @description Check push notification registration exists.
     *
     * **Credential required**: *Yes*
     */
    post: operations["sw/show-registration"];
  };
  "/sw/update-registration": {
    /**
     * sw/update-registration
     * @description Update push notification registration.
     *
     * **Credential required**: *Yes*
     */
    post: operations["sw/update-registration"];
  };
  "/sw/register": {
    /**
     * sw/register
     * @description Register to receive push notifications.
     *
     * **Credential required**: *Yes*
     */
    post: operations["sw/register"];
  };
  "/sw/unregister": {
    /**
     * sw/unregister
     * @description Unregister from receiving push notifications.
     *
     * **Credential required**: *No*
     */
    post: operations["sw/unregister"];
  };
  "/test": {
    /**
     * test
     * @description Endpoint for testing input validation.
     *
     * **Credential required**: *No*
     */
    post: operations["test"];
  };
  "/username/available": {
    /**
     * username/available
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["username/available"];
  };
  "/users": {
    /**
     * users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["users"];
  };
  "/users/clips": {
    /**
     * users/clips
     * @description Show all clips this user owns.
     *
     * **Credential required**: *No*
     */
    post: operations["users/clips"];
  };
  "/users/followers": {
    /**
     * users/followers
     * @description Show everyone that follows this user.
     *
     * **Credential required**: *No*
     */
    post: operations["users/followers"];
  };
  "/users/following": {
    /**
     * users/following
     * @description Show everyone that this user is following.
     *
     * **Credential required**: *No*
     */
    post: operations["users/following"];
  };
  "/users/gallery/posts": {
    /**
     * users/gallery/posts
     * @description Show all gallery posts by the given user.
     *
     * **Credential required**: *No*
     */
    post: operations["users/gallery/posts"];
  };
  "/users/get-frequently-replied-users": {
    /**
     * users/get-frequently-replied-users
     * @description Get a list of other users that the specified user frequently replies to.
     *
     * **Credential required**: *No*
     */
    post: operations["users/get-frequently-replied-users"];
  };
  "/users/lists/create": {
    /**
     * users/lists/create
     * @description Create a new list of users.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["users/lists/create"];
  };
  "/users/lists/delete": {
    /**
     * users/lists/delete
     * @description Delete an existing list of users.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["users/lists/delete"];
  };
  "/users/lists/list": {
    /**
     * users/lists/list
     * @description Show all lists that the authenticated user has created.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations["users/lists/list"];
  };
  "/users/lists/pull": {
    /**
     * users/lists/pull
     * @description Remove a user from a list.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["users/lists/pull"];
  };
  "/users/lists/push": {
    /**
     * users/lists/push
     * @description Add a user to an existing list.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["users/lists/push"];
  };
  "/users/lists/show": {
    /**
     * users/lists/show
     * @description Show the properties of a list.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations["users/lists/show"];
  };
  "/users/lists/favorite": {
    /**
     * users/lists/favorite
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["users/lists/favorite"];
  };
  "/users/lists/unfavorite": {
    /**
     * users/lists/unfavorite
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["users/lists/unfavorite"];
  };
  "/users/lists/update": {
    /**
     * users/lists/update
     * @description Update the properties of a list.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["users/lists/update"];
  };
  "/users/lists/create-from-public": {
    /**
     * users/lists/create-from-public
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["users/lists/create-from-public"];
  };
  "/users/notes": {
    /**
     * users/notes
     * @description Show all notes that this user created.
     *
     * **Credential required**: *No*
     */
    post: operations["users/notes"];
  };
  "/users/pages": {
    /**
     * users/pages
     * @description Show all pages this user created.
     *
     * **Credential required**: *No*
     */
    post: operations["users/pages"];
  };
  "/users/reactions": {
    /**
     * users/reactions
     * @description Show all reactions this user made.
     *
     * **Credential required**: *No*
     */
    post: operations["users/reactions"];
  };
  "/users/recommendation": {
    /**
     * users/recommendation
     * @description Show users that the authenticated user might be interested to follow.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations["users/recommendation"];
  };
  "/users/relation": {
    /**
     * users/relation
     * @description Show the different kinds of relations between the authenticated user and the specified user(s).
     *
     * **Credential required**: *Yes*
     */
    post: operations["users/relation"];
  };
  "/users/report-abuse": {
    /**
     * users/report-abuse
     * @description File a report.
     *
     * **Credential required**: *Yes*
     */
    post: operations["users/report-abuse"];
  };
  "/users/search-by-username-and-host": {
    /**
     * users/search-by-username-and-host
     * @description Search for a user by username and/or host.
     *
     * **Credential required**: *No*
     */
    post: operations["users/search-by-username-and-host"];
  };
  "/users/search": {
    /**
     * users/search
     * @description Search for users.
     *
     * **Credential required**: *No*
     */
    post: operations["users/search"];
  };
  "/users/show": {
    /**
     * users/show
     * @description Show the properties of a user.
     *
     * **Credential required**: *No*
     */
    post: operations["users/show"];
  };
  "/users/achievements": {
    /**
     * users/achievements
     * @description No description provided.
     *
     * **Credential required**: *Yes*
     */
    post: operations["users/achievements"];
  };
  "/users/update-memo": {
    /**
     * users/update-memo
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations["users/update-memo"];
  };
  "/fetch-rss": {
    /**
     * fetch-rss
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["fetch-rss"];
  };
  "/retention": {
    /**
     * retention
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations["retention"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      /** @description An error object. */
      error: {
        /** @description An error code. Unique within the endpoint. */
        code: string;
        /** @description An error message. */
        message: string;
        /**
         * Format: uuid
         * @description An error ID. This ID is static.
         */
        id: string;
      };
    };
    AbuseUserReport: {
      id: components["schemas"]["MisskeyId"];
      assignee?: components["schemas"]["User"];
      assigneeId: components["schemas"]["MisskeyId"];
      comment: string;
      /** Format: date-time */
      createdAt: string;
      forwarded: boolean;
      reporter: components["schemas"]["User"];
      reporterId: components["schemas"]["MisskeyId"];
      resolved: boolean;
      targetUser: components["schemas"]["User"];
      targetUserId: components["schemas"]["MisskeyId"];
      [key: string]: unknown;
    };
    Ad: {
      id: components["schemas"]["MisskeyId"];
      createdAt: number;
      dayOfWeek: number;
      expiresAt: number;
      imageUrl: string;
      memo: string;
      place: string;
      priority: string;
      ratio: number;
      startsAt: number;
      url: string;
      [key: string]: unknown;
    };
    Antenna: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      name: string;
      keywords: string[][];
      excludeKeywords: string[][];
      /** @enum {string} */
      src: "home" | "all" | "users" | "list";
      userListId: components["schemas"]["MisskeyId"];
      users: string[];
      caseSensitive: boolean;
      notify: boolean;
      withReplies: boolean;
      withFile: boolean;
      isActive: boolean;
      hasUnreadNote: boolean;
      [key: string]: unknown;
    };
    App: {
      id: string;
      name: string;
      callbackUrl: string | null;
      permission: string[];
      secret?: string;
      isAuthorized?: boolean;
      [key: string]: unknown;
    };
    Birthday: string;
    Blocking: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      blockeeId: components["schemas"]["MisskeyId"];
      blockee: components["schemas"]["UserDetailed"];
      [key: string]: unknown;
    };
    Channel: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      lastNotedAt: string | null;
      name: string;
      description: string | null;
      /** Format: url */
      bannerUrl: string | null;
      isArchived: boolean;
      notesCount: number;
      usersCount: number;
      isFollowing?: boolean;
      isFavorited?: boolean;
      userId: components["schemas"]["MisskeyId"];
      pinnedNoteIds: components["schemas"]["MisskeyId"][];
      color: string;
      [key: string]: unknown;
    };
    Clip: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      lastClippedAt: string | null;
      userId: components["schemas"]["MisskeyId"];
      user: components["schemas"]["UserLite"];
      name: string;
      description: string | null;
      isPublic: boolean;
      isFavorited?: boolean;
      favoritedCount: number;
      [key: string]: unknown;
    };
    Description: string;
    DriveFile: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      name: string;
      type: string;
      md5: components["schemas"]["MD5"];
      size: number;
      isSensitive: boolean;
      blurhash: string | null;
      properties: {
        width?: number;
        height?: number;
        orientation?: number;
        avgColor?: string;
        [key: string]: unknown;
      };
      /** Format: url */
      url: string | null;
      /** Format: url */
      thumbnailUrl: string | null;
      comment: string | null;
      folderId: components["schemas"]["MisskeyId"];
      folder?: components["schemas"]["DriveFolder"];
      userId: components["schemas"]["MisskeyId"];
      user?: components["schemas"]["UserLite"];
      [key: string]: unknown;
    };
    DriveFolder: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      name: string;
      foldersCount?: number;
      filesCount?: number;
      parentId: components["schemas"]["MisskeyId"];
      parent?: components["schemas"]["DriveFolder"];
      [key: string]: unknown;
    };
    EmojiDetailed: {
      id: components["schemas"]["MisskeyId"];
      aliases: components["schemas"]["MisskeyId"][];
      name: string;
      category: string | null;
      host: string | null;
      url: string;
      license: string | null;
      isSensitive: boolean;
      localOnly: boolean;
      roleIdsThatCanBeUsedThisEmojiAsReaction: components["schemas"]["MisskeyId"][];
      [key: string]: unknown;
    };
    EmojiSimple: {
      aliases: components["schemas"]["MisskeyId"][];
      name: string;
      category: string | null;
      url: string;
      isSensitive?: boolean;
      roleIdsThatCanBeUsedThisEmojiAsReaction?: components["schemas"]["MisskeyId"][];
      [key: string]: unknown;
    };
    ExportedAntenna: {
      name: string;
      /** @enum {string} */
      src: "home" | "all" | "users" | "list";
      keywords: string[][];
      excludeKeywords: string[][];
      users: string[];
      userListAccts: string[] | null;
      caseSensitive: boolean;
      withReplies: boolean;
      withFile: boolean;
      notify: boolean;
      [key: string]: unknown;
    };
    FederationInstance: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      firstRetrievedAt: string;
      host: string;
      usersCount: number;
      notesCount: number;
      followingCount: number;
      followersCount: number;
      isNotResponding: boolean;
      isSuspended: boolean;
      isBlocked: boolean;
      softwareName: string | null;
      softwareVersion: string | null;
      openRegistrations: boolean | null;
      name: string | null;
      description: string | null;
      maintainerName: string | null;
      maintainerEmail: string | null;
      /** Format: url */
      iconUrl: string | null;
      /** Format: url */
      faviconUrl: string | null;
      themeColor: string | null;
      /** Format: date-time */
      infoUpdatedAt: string | null;
      [key: string]: unknown;
    };
    Flash: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      title: string;
      summary: string;
      script: string;
      userId: components["schemas"]["MisskeyId"];
      user: components["schemas"]["UserLite"];
      likedCount: number | null;
      isLiked?: boolean;
      [key: string]: unknown;
    };
    Following: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      followeeId: components["schemas"]["MisskeyId"];
      followee?: components["schemas"]["UserDetailed"];
      followerId: components["schemas"]["MisskeyId"];
      follower?: components["schemas"]["UserDetailed"];
      [key: string]: unknown;
    };
    GalleryPost: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      title: string;
      description: string | null;
      userId: components["schemas"]["MisskeyId"];
      user: components["schemas"]["UserLite"];
      fileIds?: components["schemas"]["MisskeyId"][];
      files?: components["schemas"]["DriveFile"][];
      tags?: string[];
      isSensitive: boolean;
      likedCount: number;
      isLiked?: boolean;
      [key: string]: unknown;
    };
    Hashtag: {
      tag: string;
      mentionedUsersCount: number;
      mentionedLocalUsersCount: number;
      mentionedRemoteUsersCount: number;
      attachedUsersCount: number;
      attachedLocalUsersCount: number;
      attachedRemoteUsersCount: number;
      [key: string]: unknown;
    };
    InviteCode: {
      id: components["schemas"]["MisskeyId"];
      code: string;
      /** Format: date-time */
      expiresAt: string | null;
      /** Format: date-time */
      createdAt: string;
      createdBy: components["schemas"]["UserLite"];
      usedBy: components["schemas"]["UserLite"];
      /** Format: date-time */
      usedAt: string | null;
      used: boolean;
      [key: string]: unknown;
    };
    LocalUsername: string;
    Location: string;
    MD5: string;
    MeDetailed: {
      id: components["schemas"]["MisskeyId"];
      name: string | null;
      username: string;
      host: string | null;
      /** Format: url */
      avatarUrl: string;
      avatarBlurhash: string | null;
      badgeRoles?: ({
          name: string;
          iconUrl: string | null;
          displayOrder: number;
          [key: string]: unknown;
        })[];
      emojis: {
        [key: string]: string | undefined;
      };
      instance?: {
        name: string | null;
        softwareName: string | null;
        softwareVersion: string | null;
        /** Format: url */
        iconUrl: string | null;
        /** Format: url */
        faviconUrl: string | null;
        themeColor: string | null;
        [key: string]: unknown;
      };
      /** @enum {string} */
      onlineStatus: "unknown" | "online" | "active" | "offline";
      isBot: boolean;
      isCat: boolean;
      /** Format: url */
      url: string | null;
      /** Format: url */
      uri: string | null;
      /** Format: url */
      movedTo: string | null;
      alsoKnownAs: components["schemas"]["MisskeyId"][] | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      lastFetchedAt: string | null;
      /** Format: url */
      bannerUrl: string | null;
      bannerBlurhash: string | null;
      isLocked: boolean;
      isSilenced: boolean;
      isSuspended: boolean;
      description: string | null;
      location: string | null;
      birthday: string | null;
      lang: string | null;
      fields: {
          name: string;
          value: string;
          [key: string]: unknown;
        }[];
      followersCount: number;
      followingCount: number;
      notesCount: number;
      pinnedNoteIds: components["schemas"]["MisskeyId"][];
      pinnedNotes: components["schemas"]["Note"][];
      pinnedPageId: string | null;
      pinnedPage: components["schemas"]["Page"];
      publicReactions: boolean;
      twoFactorEnabled: boolean;
      usePasswordLessLogin: boolean;
      securityKeys: boolean;
      memo: string | null;
      roles: ({
          id: components["schemas"]["MisskeyId"];
          name: string;
          color: string | null;
          iconUrl: string | null;
          description: string;
          isModerator: boolean;
          isAdministrator: boolean;
          displayOrder: number;
          [key: string]: unknown;
        })[];
      moderationNote?: string;
      /** @enum {string} */
      ffVisibility: "public" | "followers" | "private";
      avatarId: components["schemas"]["MisskeyId"];
      bannerId: components["schemas"]["MisskeyId"];
      injectFeaturedNote: boolean;
      receiveAnnouncementEmail: boolean;
      alwaysMarkNsfw: boolean;
      autoSensitive: boolean;
      carefulBot: boolean;
      autoAcceptFollowed: boolean;
      noCrawle: boolean;
      preventAiLearning: boolean;
      isExplorable: boolean;
      isDeleted: boolean;
      hideOnlineStatus: boolean;
      hasUnreadSpecifiedNotes: boolean;
      hasUnreadMentions: boolean;
      hasUnreadAnnouncement: boolean;
      hasUnreadAntenna: boolean;
      hasUnreadNotification: boolean;
      hasPendingReceivedFollowRequest: boolean;
      mutedWords: string[][];
      mutedInstances: string[] | null;
      mutingNotificationTypes: ("follow" | "mention" | "reply" | "renote" | "quote" | "reaction" | "pollVote" | "pollEnded" | "receiveFollowRequest" | "followRequestAccepted" | "groupInvited" | "achievementEarned" | "app")[];
      emailNotificationTypes: string[] | null;
      isAdmin?: boolean | null;
      isModerator?: boolean | null;
      policies: {
        gtlAvailable?: boolean;
        ltlAvailable?: boolean;
        canPublicNote?: boolean;
        canInvite?: boolean;
        inviteLimit?: number;
        inviteLimitCycle?: number;
        inviteExpirationTime?: number;
        canManageCustomEmojis?: boolean;
        canSearchNotes?: boolean;
        canHideAds?: boolean;
        driveCapacityMb?: number;
        alwaysMarkNsfw?: boolean;
        pinLimit?: number;
        antennaLimit?: number;
        wordMuteLimit?: number;
        webhookLimit?: number;
        clipLimit?: number;
        noteEachClipsLimit?: number;
        userListLimit?: number;
        userEachUserListsLimit?: number;
        rateLimitFactor?: number;
        [key: string]: unknown;
      };
      loggedInDays: number;
      /** @enum {unknown} */
      hasUnreadChannel: "";
      achievements: {
          name: string;
          unlockedAt: number;
          [key: string]: unknown;
        }[];
      [key: string]: unknown;
    };
    MeDetailedOnly: {
      avatarId: components["schemas"]["MisskeyId"];
      bannerId: components["schemas"]["MisskeyId"];
      injectFeaturedNote: boolean;
      receiveAnnouncementEmail: boolean;
      alwaysMarkNsfw: boolean;
      autoSensitive: boolean;
      carefulBot: boolean;
      autoAcceptFollowed: boolean;
      noCrawle: boolean;
      preventAiLearning: boolean;
      isExplorable: boolean;
      isDeleted: boolean;
      hideOnlineStatus: boolean;
      hasUnreadSpecifiedNotes: boolean;
      hasUnreadMentions: boolean;
      hasUnreadAnnouncement: boolean;
      hasUnreadAntenna: boolean;
      hasUnreadNotification: boolean;
      hasPendingReceivedFollowRequest: boolean;
      mutedWords: string[][];
      mutedInstances: string[] | null;
      mutingNotificationTypes: ("follow" | "mention" | "reply" | "renote" | "quote" | "reaction" | "pollVote" | "pollEnded" | "receiveFollowRequest" | "followRequestAccepted" | "groupInvited" | "achievementEarned" | "app")[];
      emailNotificationTypes: string[] | null;
      isAdmin?: boolean | null;
      isModerator?: boolean | null;
      policies: {
        gtlAvailable?: boolean;
        ltlAvailable?: boolean;
        canPublicNote?: boolean;
        canInvite?: boolean;
        inviteLimit?: number;
        inviteLimitCycle?: number;
        inviteExpirationTime?: number;
        canManageCustomEmojis?: boolean;
        canSearchNotes?: boolean;
        canHideAds?: boolean;
        driveCapacityMb?: number;
        alwaysMarkNsfw?: boolean;
        pinLimit?: number;
        antennaLimit?: number;
        wordMuteLimit?: number;
        webhookLimit?: number;
        clipLimit?: number;
        noteEachClipsLimit?: number;
        userListLimit?: number;
        userEachUserListsLimit?: number;
        rateLimitFactor?: number;
        [key: string]: unknown;
      };
      loggedInDays: number;
      /** @enum {unknown} */
      hasUnreadChannel: "";
      achievements: {
          name: string;
          unlockedAt: number;
          [key: string]: unknown;
        }[];
      [key: string]: unknown;
    };
    MisskeyId: string;
    Muting: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      expiresAt: string | null;
      muteeId: components["schemas"]["MisskeyId"];
      mutee: components["schemas"]["UserDetailed"];
      [key: string]: unknown;
    };
    Name: string;
    Note: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt?: string | null;
      text: string | null;
      cw?: string | null;
      userId: components["schemas"]["MisskeyId"];
      user: components["schemas"]["UserLite"];
      replyId?: components["schemas"]["MisskeyId"];
      renoteId?: components["schemas"]["MisskeyId"];
      isHidden?: boolean;
      visibility: string;
      mentions?: components["schemas"]["MisskeyId"][];
      visibleUserIds?: components["schemas"]["MisskeyId"][];
      fileIds?: components["schemas"]["MisskeyId"][];
      files?: components["schemas"]["DriveFile"][];
      tags?: string[];
      poll?: Record<string, unknown> | null;
      channelId?: components["schemas"]["MisskeyId"];
      channel?: ({
        id: string;
        name: string | null;
        color: string;
        [key: string]: unknown;
      }) | null;
      localOnly?: boolean;
      reactionAcceptance: string | null;
      reactions?: unknown;
      renoteCount: number;
      repliesCount: number;
      uri?: string;
      url?: string;
      myReaction?: Record<string, unknown> | null;
      reply?: components["schemas"]["Note"];
      renote?: components["schemas"]["Note"];
      [key: string]: unknown;
    };
    NoteFavorite: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      note: components["schemas"]["Note"];
      noteId: components["schemas"]["MisskeyId"];
      [key: string]: unknown;
    };
    NoteReaction: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      user: components["schemas"]["UserLite"];
      type: string;
      [key: string]: unknown;
    };
    Notification: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: "follow" | "mention" | "reply" | "renote" | "quote" | "reaction" | "pollEnded" | "receiveFollowRequest" | "followRequestAccepted" | "achievementEarned" | "app";
      user?: components["schemas"]["UserLite"];
      userId?: components["schemas"]["MisskeyId"];
      note?: components["schemas"]["Note"];
      reaction?: string | null;
      choice?: number | null;
      invitation?: Record<string, unknown> | null;
      body?: string | null;
      header?: string | null;
      icon?: string | null;
      [key: string]: unknown;
    };
    Page: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      title: string;
      name: string;
      summary: string | null;
      content: components["schemas"]["PageContent"];
      variables: unknown[];
      userId: components["schemas"]["MisskeyId"];
      user: components["schemas"]["UserLite"];
      hideTitleWhenPinned: boolean;
      alignCenter: boolean;
      font: string;
      script: string;
      eyeCatchingImageId: string | null;
      eyeCatchingImage: components["schemas"]["DriveFile"];
      attachedFiles: components["schemas"]["DriveFile"][];
      likedCount: number;
      isLiked?: boolean;
      [key: string]: unknown;
    };
    PageContent: (({
        id: string;
        /** @enum {unknown} */
        type: "section";
        title: string | null;
        children: components["schemas"]["PageContent"];
        [key: string]: unknown;
      }) | {
        id: string;
        /** @enum {unknown} */
        type: "text";
        text?: string;
        [key: string]: unknown;
      } | {
        id: string;
        /** @enum {unknown} */
        type: "note";
        note?: string;
        detailed?: boolean;
        [key: string]: unknown;
      } | {
        id: string;
        /** @enum {unknown} */
        type: "image";
        fileId?: string;
        [key: string]: unknown;
      })[];
    Password: string;
    QueueCount: {
      waiting: number;
      active: number;
      completed: number;
      failed: number;
      delayed: number;
      [key: string]: unknown;
    };
    RenoteMuting: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      muteeId: components["schemas"]["MisskeyId"];
      mutee: components["schemas"]["UserDetailed"];
      [key: string]: unknown;
    };
    Role: {
      id: components["schemas"]["MisskeyId"];
      createdAt: string;
      updatedAt: string | null;
      name: string;
      description: string;
      color: string | null;
      iconUrl: string | null;
      /** @enum {string} */
      target: "manual" | "conditional";
      condFormula: components["schemas"]["RoleCondFormulaValue"];
      isPublic: boolean;
      isModerator: boolean;
      isAdministrator: boolean;
      /** @default false */
      isExplorable?: boolean;
      asBadge: boolean;
      canEditMembersByModerator: boolean;
      displayOrder: number;
      policies: components["schemas"]["RolePolicies"];
      usersCount: number;
      [key: string]: unknown;
    };
    RoleCondFormulaValue: Record<string, never> | {
      /** @enum {unknown} */
      type: "and";
      values: components["schemas"]["RoleCondFormulaValue"][];
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "or";
      values: components["schemas"]["RoleCondFormulaValue"][];
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "not";
      value: components["schemas"]["RoleCondFormulaValue"];
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "isLocal";
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "isRemote";
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "createdLessThan";
      sec: number;
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "createdMoreThan";
      sec: number;
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "followersLessThanOrEq";
      value: number;
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "followersMoreThanOrEq";
      value: number;
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "followingLessThanOrEq";
      value: number;
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "followingMoreThanOrEq";
      value: number;
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "notesLessThanOrEq";
      value: number;
      [key: string]: unknown;
    } | {
      /** @enum {unknown} */
      type: "notesMoreThanOrEq";
      value: number;
      [key: string]: unknown;
    };
    RolePolicies: {
      gtlAvailable?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      ltlAvailable?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      canPublicNote?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      canInvite?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      inviteLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      inviteLimitCycle?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      inviteExpirationTime?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      canManageCustomEmojis?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      canSearchNotes?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      canHideAds?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      driveCapacityMb?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      alwaysMarkNsfw?: {
        useDefault: boolean;
        priority: number;
        value: boolean;
        [key: string]: unknown;
      };
      pinLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      antennaLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      wordMuteLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      webhookLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      clipLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      noteEachClipsLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      userListLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      userEachUserListsLimit?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      rateLimitFactor?: {
        useDefault: boolean;
        priority: number;
        value: number;
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    User: components["schemas"]["UserLite"] | components["schemas"]["UserDetailed"];
    UserDetailed: components["schemas"]["UserDetailedNotMe"] | components["schemas"]["MeDetailed"];
    UserDetailedNotMe: {
      id: components["schemas"]["MisskeyId"];
      name: string | null;
      username: string;
      host: string | null;
      /** Format: url */
      avatarUrl: string;
      avatarBlurhash: string | null;
      badgeRoles?: ({
          name: string;
          iconUrl: string | null;
          displayOrder: number;
          [key: string]: unknown;
        })[];
      emojis: {
        [key: string]: string | undefined;
      };
      instance?: {
        name: string | null;
        softwareName: string | null;
        softwareVersion: string | null;
        /** Format: url */
        iconUrl: string | null;
        /** Format: url */
        faviconUrl: string | null;
        themeColor: string | null;
        [key: string]: unknown;
      };
      /** @enum {string} */
      onlineStatus: "unknown" | "online" | "active" | "offline";
      isBot: boolean;
      isCat: boolean;
      /** Format: url */
      url: string | null;
      /** Format: url */
      uri: string | null;
      /** Format: url */
      movedTo: string | null;
      alsoKnownAs: components["schemas"]["MisskeyId"][] | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      lastFetchedAt: string | null;
      /** Format: url */
      bannerUrl: string | null;
      bannerBlurhash: string | null;
      isLocked: boolean;
      isSilenced: boolean;
      isSuspended: boolean;
      description: string | null;
      location: string | null;
      birthday: string | null;
      lang: string | null;
      fields: {
          name: string;
          value: string;
          [key: string]: unknown;
        }[];
      followersCount: number;
      followingCount: number;
      notesCount: number;
      pinnedNoteIds: components["schemas"]["MisskeyId"][];
      pinnedNotes: components["schemas"]["Note"][];
      pinnedPageId: string | null;
      pinnedPage: components["schemas"]["Page"];
      publicReactions: boolean;
      twoFactorEnabled: boolean;
      usePasswordLessLogin: boolean;
      securityKeys: boolean;
      memo: string | null;
      roles: ({
          id: components["schemas"]["MisskeyId"];
          name: string;
          color: string | null;
          iconUrl: string | null;
          description: string;
          isModerator: boolean;
          isAdministrator: boolean;
          displayOrder: number;
          [key: string]: unknown;
        })[];
      moderationNote?: string;
      /** @enum {string} */
      ffVisibility: "public" | "followers" | "private";
      hasPendingFollowRequestFromYou: boolean;
      hasPendingFollowRequestToYou: boolean;
      isBlocked: boolean;
      isBlocking: boolean;
      isFollowed: boolean;
      isFollowing: boolean;
      isMuted: boolean;
      isRenoteMuted: boolean;
      [key: string]: unknown;
    };
    UserDetailedNotMeOnly: {
      /** Format: url */
      url: string | null;
      /** Format: url */
      uri: string | null;
      /** Format: url */
      movedTo: string | null;
      alsoKnownAs: components["schemas"]["MisskeyId"][] | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      lastFetchedAt: string | null;
      /** Format: url */
      bannerUrl: string | null;
      bannerBlurhash: string | null;
      isLocked: boolean;
      isSilenced: boolean;
      isSuspended: boolean;
      description: string | null;
      location: string | null;
      birthday: string | null;
      lang: string | null;
      fields: {
          name: string;
          value: string;
          [key: string]: unknown;
        }[];
      followersCount: number;
      followingCount: number;
      notesCount: number;
      pinnedNoteIds: components["schemas"]["MisskeyId"][];
      pinnedNotes: components["schemas"]["Note"][];
      pinnedPageId: string | null;
      pinnedPage: components["schemas"]["Page"];
      publicReactions: boolean;
      twoFactorEnabled: boolean;
      usePasswordLessLogin: boolean;
      securityKeys: boolean;
      memo: string | null;
      roles: ({
          id: components["schemas"]["MisskeyId"];
          name: string;
          color: string | null;
          iconUrl: string | null;
          description: string;
          isModerator: boolean;
          isAdministrator: boolean;
          displayOrder: number;
          [key: string]: unknown;
        })[];
      moderationNote?: string;
      /** @enum {string} */
      ffVisibility: "public" | "followers" | "private";
      [key: string]: unknown;
    };
    UserList: {
      id: components["schemas"]["MisskeyId"];
      /** Format: date-time */
      createdAt: string;
      name: string;
      userIds?: components["schemas"]["MisskeyId"][];
      isPublic: boolean;
      [key: string]: unknown;
    };
    UserLite: {
      id: components["schemas"]["MisskeyId"];
      name: string | null;
      username: string;
      host: string | null;
      /** Format: url */
      avatarUrl: string;
      avatarBlurhash: string | null;
      badgeRoles?: ({
          name: string;
          iconUrl: string | null;
          displayOrder: number;
          [key: string]: unknown;
        })[];
      emojis: {
        [key: string]: string | undefined;
      };
      instance?: {
        name: string | null;
        softwareName: string | null;
        softwareVersion: string | null;
        /** Format: url */
        iconUrl: string | null;
        /** Format: url */
        faviconUrl: string | null;
        themeColor: string | null;
        [key: string]: unknown;
      };
      /** @enum {string} */
      onlineStatus: "unknown" | "online" | "active" | "offline";
      isBot: boolean;
      isCat: boolean;
      [key: string]: unknown;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * admin/meta
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/meta": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            cacheRemoteFiles: boolean;
            cacheRemoteSensitiveFiles: boolean;
            emailRequiredForSignup: boolean;
            enableHcaptcha: boolean;
            hcaptchaSiteKey: string | null;
            enableRecaptcha: boolean;
            recaptchaSiteKey: string | null;
            enableTurnstile: boolean;
            turnstileSiteKey: string | null;
            swPublickey: string | null;
            /** @default /assets/ai.png */
            mascotImageUrl?: string | null;
            bannerUrl: string | null;
            serverErrorImageUrl: string | null;
            infoImageUrl: string | null;
            notFoundImageUrl: string | null;
            iconUrl: string | null;
            enableEmail: boolean;
            enableServiceWorker: boolean;
            translatorAvailable: boolean;
            userStarForReactionFallback?: boolean;
            pinnedUsers?: string[];
            hiddenTags?: string[];
            blockedHosts?: string[];
            sensitiveWords?: string[];
            preservedUsernames: string[];
            hcaptchaSecretKey?: string | null;
            recaptchaSecretKey?: string | null;
            turnstileSecretKey?: string | null;
            sensitiveMediaDetection?: string;
            sensitiveMediaDetectionSensitivity?: string;
            setSensitiveFlagAutomatically?: boolean;
            enableSensitiveMediaDetectionForVideos?: boolean;
            proxyAccountId?: components["schemas"]["MisskeyId"];
            summalyProxy?: string | null;
            email?: string | null;
            smtpSecure?: boolean;
            smtpHost?: string | null;
            smtpPort?: number | null;
            smtpUser?: string | null;
            smtpPass?: string | null;
            swPrivateKey?: string | null;
            useObjectStorage?: boolean;
            objectStorageBaseUrl?: string | null;
            objectStorageBucket?: string | null;
            objectStoragePrefix?: string | null;
            objectStorageEndpoint?: string | null;
            objectStorageRegion?: string | null;
            objectStoragePort?: number | null;
            objectStorageAccessKey?: string | null;
            objectStorageSecretKey?: string | null;
            objectStorageUseSSL?: boolean;
            objectStorageUseProxy?: boolean;
            objectStorageSetPublicRead?: boolean;
            enableIpLogging?: boolean;
            enableActiveEmailValidation?: boolean;
            enableChartsForRemoteUser: boolean;
            enableChartsForFederatedInstances: boolean;
            enableServerMachineStats: boolean;
            enableIdenticonGeneration: boolean;
            policies?: unknown;
            maintainerName: string | null;
            maintainerEmail: string | null;
            version: string;
            name: string | null;
            uri: string;
            description: string | null;
            langs: string[];
            tosUrl: string | null;
            repositoryUrl: string;
            feedbackUrl: string | null;
            disableRegistration: boolean;
            themeColor: string | null;
            backgroundImageUrl: string | null;
            logoImageUrl: string | null;
            defaultLightTheme: string | null;
            defaultDarkTheme: string | null;
            objectStorageS3ForcePathStyle: boolean;
            deeplAuthKey: string | null;
            deeplIsPro: boolean;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/abuse-user-reports
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/abuse-user-reports": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default null */
          state?: string | null;
          /**
           * @default combined
           * @enum {string}
           */
          reporterOrigin?: "combined" | "local" | "remote";
          /**
           * @default combined
           * @enum {string}
           */
          targetUserOrigin?: "combined" | "local" | "remote";
          /** @default false */
          forwarded?: boolean;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["AbuseUserReport"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/accounts/create
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "admin/accounts/create": {
    requestBody: {
      content: {
        "application/json": {
          username: components["schemas"]["LocalUsername"];
          password: components["schemas"]["Password"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            id: components["schemas"]["MisskeyId"];
            name: string | null;
            username: string;
            host: string | null;
            /** Format: url */
            avatarUrl: string;
            avatarBlurhash: string | null;
            badgeRoles?: ({
                name: string;
                iconUrl: string | null;
                displayOrder: number;
                [key: string]: unknown;
              })[];
            emojis: {
              [key: string]: string | undefined;
            };
            instance?: {
              name: string | null;
              softwareName: string | null;
              softwareVersion: string | null;
              /** Format: url */
              iconUrl: string | null;
              /** Format: url */
              faviconUrl: string | null;
              themeColor: string | null;
              [key: string]: unknown;
            };
            /** @enum {string} */
            onlineStatus: "unknown" | "online" | "active" | "offline";
            isBot: boolean;
            isCat: boolean;
            /** Format: url */
            url: string | null;
            /** Format: url */
            uri: string | null;
            /** Format: url */
            movedTo: string | null;
            alsoKnownAs: components["schemas"]["MisskeyId"][] | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string | null;
            /** Format: date-time */
            lastFetchedAt: string | null;
            /** Format: url */
            bannerUrl: string | null;
            bannerBlurhash: string | null;
            isLocked: boolean;
            isSilenced: boolean;
            isSuspended: boolean;
            description: string | null;
            location: string | null;
            birthday: string | null;
            lang: string | null;
            fields: {
                name: string;
                value: string;
                [key: string]: unknown;
              }[];
            followersCount: number;
            followingCount: number;
            notesCount: number;
            pinnedNoteIds: components["schemas"]["MisskeyId"][];
            pinnedNotes: components["schemas"]["Note"][];
            pinnedPageId: string | null;
            pinnedPage: components["schemas"]["Page"];
            publicReactions: boolean;
            twoFactorEnabled: boolean;
            usePasswordLessLogin: boolean;
            securityKeys: boolean;
            memo: string | null;
            roles: ({
                id: components["schemas"]["MisskeyId"];
                name: string;
                color: string | null;
                iconUrl: string | null;
                description: string;
                isModerator: boolean;
                isAdministrator: boolean;
                displayOrder: number;
                [key: string]: unknown;
              })[];
            moderationNote?: string;
            /** @enum {string} */
            ffVisibility: "public" | "followers" | "private";
            hasPendingFollowRequestFromYou: boolean;
            hasPendingFollowRequestToYou: boolean;
            isBlocked: boolean;
            isBlocking: boolean;
            isFollowed: boolean;
            isFollowing: boolean;
            isMuted: boolean;
            isRenoteMuted: boolean;
            token: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/accounts/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/accounts/delete": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/ad/create
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/ad/create": {
    requestBody: {
      content: {
        "application/json": {
          createdAt: number;
          dayOfWeek: number;
          expiresAt: number;
          imageUrl: string;
          memo: string;
          place: string;
          priority: string;
          ratio: number;
          startsAt: number;
          url: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/ad/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/ad/delete": {
    requestBody: {
      content: {
        "application/json": {
          id: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/ad/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/ad/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Ad"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/ad/update
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/ad/update": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ad"];
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/announcements/create
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/announcements/create": {
    requestBody: {
      content: {
        "application/json": {
          title: string;
          text: string;
          imageUrl: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            id: components["schemas"]["MisskeyId"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string | null;
            title: string;
            text: string;
            imageUrl: string | null;
            reads: number;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/announcements/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/announcements/delete": {
    requestBody: {
      content: {
        "application/json": {
          id: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/announcements/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/announcements/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ({
              id: components["schemas"]["MisskeyId"];
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string | null;
              title: string;
              text: string;
              imageUrl: string | null;
              reads: number;
              [key: string]: unknown;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/announcements/update
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/announcements/update": {
    requestBody: {
      content: {
        "application/json": {
          id: components["schemas"]["MisskeyId"];
          imageUrl: string | null;
          text: string;
          title: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/delete-all-files-of-a-user
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/delete-all-files-of-a-user": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/drive/clean-remote-files
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/drive/clean-remote-files": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/drive/cleanup
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/drive/cleanup": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/drive/files
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/drive/files": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          userId?: components["schemas"]["MisskeyId"];
          type?: string | null;
          /**
           * @default local
           * @enum {string}
           */
          origin?: "combined" | "local" | "remote";
          /** @default null */
          hostname?: string | null;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/drive/show-file
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/drive/show-file": {
    requestBody: {
      content: {
        "application/json": {
          fileId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        } | {
          url: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            id: components["schemas"]["MisskeyId"];
            /** Format: date-time */
            createdAt: string;
            userId: components["schemas"]["MisskeyId"];
            userHost: string | null;
            md5: components["schemas"]["MD5"];
            name: string;
            type: string;
            size: number;
            comment: string | null;
            blurhash: string | null;
            properties?: unknown;
            storedInternal: boolean | null;
            /** Format: url */
            url: string | null;
            /** Format: url */
            thumbnailUrl: string | null;
            /** Format: url */
            webpublicUrl: string | null;
            accessKey: string | null;
            thumbnailAccessKey: string | null;
            webpublicAccessKey: string | null;
            uri: string | null;
            src: string | null;
            folderId: components["schemas"]["MisskeyId"];
            isSensitive: boolean;
            isLink: boolean;
            maybePorn: boolean;
            maybeSensitive: boolean;
            webpublicType: string | null;
            requestIp: string | null;
            requestHeaders: ({
              [key: string]: string | undefined;
            }) | null;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/add-aliases-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/add-aliases-bulk": {
    requestBody: {
      content: {
        "application/json": {
          ids: components["schemas"]["MisskeyId"][];
          aliases: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/add
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/add": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          fileId: components["schemas"]["MisskeyId"];
          category?: string | null;
          aliases?: string[];
          license?: string | null;
          isSensitive?: boolean;
          localOnly?: boolean;
          roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["EmojiDetailed"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/copy
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/copy": {
    requestBody: {
      content: {
        "application/json": {
          emojiId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            id: components["schemas"]["MisskeyId"];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/delete-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/delete-bulk": {
    requestBody: {
      content: {
        "application/json": {
          ids: components["schemas"]["MisskeyId"][];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/delete": {
    requestBody: {
      content: {
        "application/json": {
          id: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/list-remote
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/list-remote": {
    requestBody: {
      content: {
        "application/json": {
          /** @default null */
          query?: string | null;
          /** @default null */
          host?: string | null;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ({
              id: components["schemas"]["MisskeyId"];
              aliases: string[];
              name: string;
              category: string | null;
              host: string | null;
              url: string;
              [key: string]: unknown;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default null */
          query?: string | null;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ({
              id: components["schemas"]["MisskeyId"];
              aliases: string[];
              name: string;
              category: string | null;
              host: string | null;
              url: string;
              [key: string]: unknown;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/remove-aliases-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/remove-aliases-bulk": {
    requestBody: {
      content: {
        "application/json": {
          ids: components["schemas"]["MisskeyId"][];
          aliases: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/set-aliases-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/set-aliases-bulk": {
    requestBody: {
      content: {
        "application/json": {
          ids: components["schemas"]["MisskeyId"][];
          aliases: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/set-category-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/set-category-bulk": {
    requestBody: {
      content: {
        "application/json": {
          ids: components["schemas"]["MisskeyId"][];
          category?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/set-license-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/set-license-bulk": {
    requestBody: {
      content: {
        "application/json": {
          ids: components["schemas"]["MisskeyId"][];
          license?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/emoji/update
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/emoji/update": {
    requestBody: {
      content: {
        "application/json": {
          id: components["schemas"]["MisskeyId"];
          name: string;
          fileId?: components["schemas"]["MisskeyId"];
          category?: string | null;
          aliases: string[];
          license?: string | null;
          isSensitive?: boolean;
          localOnly?: boolean;
          roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/federation/delete-all-files
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/federation/delete-all-files": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/federation/refresh-remote-instance-metadata
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/federation/refresh-remote-instance-metadata": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/federation/remove-all-following
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/federation/remove-all-following": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/federation/update-instance
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/federation/update-instance": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          isSuspended: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/get-index-stats
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/get-index-stats": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              tablename: string;
              indexname: string;
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/get-table-stats
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/get-table-stats": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            [key: string]: {
              count: number;
              size: number;
              [key: string]: unknown;
            } | undefined;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/get-user-ips
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/get-user-ips": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              ip: string;
              createdAt: string;
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/invite/create
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/invite/create": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 1 */
          count?: number;
          expiresAt?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              code: string;
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/invite/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/invite/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 30 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /**
           * @default all
           * @enum {string}
           */
          type?: "unused" | "used" | "expired" | "all";
          /** @enum {string} */
          sort?: "+createdAt" | "-createdAt" | "+usedAt" | "-usedAt";
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/promo/create
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/promo/create": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          expiresAt: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/queue/clear
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/queue/clear": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/queue/deliver-delayed
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/queue/deliver-delayed": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ((string | number)[])[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/queue/inbox-delayed
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/queue/inbox-delayed": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ((string | number)[])[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/queue/promote
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/queue/promote": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          type: "deliver" | "inbox";
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/queue/stats
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/queue/stats": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            deliver: components["schemas"]["QueueCount"];
            inbox: components["schemas"]["QueueCount"];
            db: components["schemas"]["QueueCount"];
            objectStorage: components["schemas"]["QueueCount"];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/relays/add
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/relays/add": {
    requestBody: {
      content: {
        "application/json": {
          inbox: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            id: components["schemas"]["MisskeyId"];
            /** Format: url */
            inbox: string;
            /**
             * @default requesting
             * @enum {string}
             */
            status?: "requesting" | "accepted" | "rejected";
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/relays/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/relays/list": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ({
              id: components["schemas"]["MisskeyId"];
              /** Format: url */
              inbox: string;
              /**
               * @default requesting
               * @enum {string}
               */
              status?: "requesting" | "accepted" | "rejected";
              [key: string]: unknown;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/relays/remove
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/relays/remove": {
    requestBody: {
      content: {
        "application/json": {
          inbox: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/reset-password
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/reset-password": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            password: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/resolve-abuse-user-report
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/resolve-abuse-user-report": {
    requestBody: {
      content: {
        "application/json": {
          reportId: components["schemas"]["MisskeyId"];
          /** @default false */
          forward?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/send-email
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/send-email": {
    requestBody: {
      content: {
        "application/json": {
          to: string;
          subject: string;
          text: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/server-info
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/server-info": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            machine: string;
            os: string;
            node: string;
            psql: string;
            cpu: {
              model: string;
              cores: number;
              [key: string]: unknown;
            };
            mem: {
              total: number;
              [key: string]: unknown;
            };
            fs: {
              total: number;
              used: number;
              [key: string]: unknown;
            };
            net: {
              interface: string;
              [key: string]: unknown;
            };
            redis?: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/show-moderation-logs
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/show-moderation-logs": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              id: components["schemas"]["MisskeyId"];
              /** Format: date-time */
              createdAt: string;
              type: string;
              info?: unknown;
              userId: components["schemas"]["MisskeyId"];
              user: components["schemas"]["UserDetailed"];
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/show-user
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/show-user": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/show-users
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/show-users": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** @enum {string} */
          sort?: "+follower" | "-follower" | "+createdAt" | "-createdAt" | "+updatedAt" | "-updatedAt" | "+lastActiveDate" | "-lastActiveDate";
          /**
           * @default all
           * @enum {string}
           */
          state?: "all" | "alive" | "available" | "admin" | "moderator" | "adminOrModerator" | "suspended";
          /**
           * @default combined
           * @enum {string}
           */
          origin?: "combined" | "local" | "remote";
          /** @default null */
          username?: string | null;
          /** @default null */
          hostname?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/suspend-user
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/suspend-user": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/unsuspend-user
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/unsuspend-user": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/update-meta
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/update-meta": {
    requestBody: {
      content: {
        "application/json": {
          disableRegistration?: boolean | null;
          pinnedUsers?: string[] | null;
          hiddenTags?: string[] | null;
          blockedHosts?: string[] | null;
          sensitiveWords?: string[] | null;
          themeColor?: string | null;
          mascotImageUrl?: string | null;
          bannerUrl?: string | null;
          serverErrorImageUrl?: string | null;
          infoImageUrl?: string | null;
          notFoundImageUrl?: string | null;
          iconUrl?: string | null;
          backgroundImageUrl?: string | null;
          logoImageUrl?: string | null;
          name?: string | null;
          description?: string | null;
          defaultLightTheme?: string | null;
          defaultDarkTheme?: string | null;
          cacheRemoteFiles?: boolean;
          cacheRemoteSensitiveFiles?: boolean;
          emailRequiredForSignup?: boolean;
          enableHcaptcha?: boolean;
          hcaptchaSiteKey?: string | null;
          hcaptchaSecretKey?: string | null;
          enableRecaptcha?: boolean;
          recaptchaSiteKey?: string | null;
          recaptchaSecretKey?: string | null;
          enableTurnstile?: boolean;
          turnstileSiteKey?: string | null;
          turnstileSecretKey?: string | null;
          /** @enum {string} */
          sensitiveMediaDetection?: "none" | "all" | "local" | "remote";
          /** @enum {string} */
          sensitiveMediaDetectionSensitivity?: "medium" | "low" | "high" | "veryLow" | "veryHigh";
          setSensitiveFlagAutomatically?: boolean;
          enableSensitiveMediaDetectionForVideos?: boolean;
          proxyAccountId?: components["schemas"]["MisskeyId"];
          maintainerName?: string | null;
          maintainerEmail?: string | null;
          langs?: string[];
          summalyProxy?: string | null;
          deeplAuthKey?: string | null;
          deeplIsPro?: boolean;
          enableEmail?: boolean;
          email?: string | null;
          smtpSecure?: boolean;
          smtpHost?: string | null;
          smtpPort?: number | null;
          smtpUser?: string | null;
          smtpPass?: string | null;
          enableServiceWorker?: boolean;
          swPublicKey?: string | null;
          swPrivateKey?: string | null;
          tosUrl?: string | null;
          repositoryUrl?: string;
          feedbackUrl?: string;
          useObjectStorage?: boolean;
          objectStorageBaseUrl?: string | null;
          objectStorageBucket?: string | null;
          objectStoragePrefix?: string | null;
          objectStorageEndpoint?: string | null;
          objectStorageRegion?: string | null;
          objectStoragePort?: number | null;
          objectStorageAccessKey?: string | null;
          objectStorageSecretKey?: string | null;
          objectStorageUseSSL?: boolean;
          objectStorageUseProxy?: boolean;
          objectStorageSetPublicRead?: boolean;
          objectStorageS3ForcePathStyle?: boolean;
          enableIpLogging?: boolean;
          enableActiveEmailValidation?: boolean;
          enableChartsForRemoteUser?: boolean;
          enableChartsForFederatedInstances?: boolean;
          enableServerMachineStats?: boolean;
          enableIdenticonGeneration?: boolean;
          serverRules?: string[];
          preservedUsernames?: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/delete-account
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/delete-account": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/update-user-note
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/update-user-note": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          text: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/create
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/create": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description: string;
          color: string | null;
          iconUrl: string | null;
          /** @enum {string} */
          target: "manual" | "conditional";
          condFormula: components["schemas"]["RoleCondFormulaValue"];
          isPublic: boolean;
          isModerator: boolean;
          isAdministrator: boolean;
          /** @default false */
          isExplorable?: boolean;
          asBadge: boolean;
          canEditMembersByModerator: boolean;
          displayOrder: number;
          policies: components["schemas"]["RolePolicies"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/delete": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/list": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Role"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/show
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/show": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Role"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/update
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/update": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          name: string;
          description: string;
          color: string | null;
          iconUrl: string | null;
          /** @enum {string} */
          target: "manual" | "conditional";
          condFormula: components["schemas"]["RoleCondFormulaValue"];
          isPublic: boolean;
          isModerator: boolean;
          isAdministrator: boolean;
          isExplorable?: boolean;
          asBadge: boolean;
          canEditMembersByModerator: boolean;
          displayOrder: number;
          policies: components["schemas"]["RolePolicies"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/assign
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/assign": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          userId: components["schemas"]["MisskeyId"];
          expiresAt?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/unassign
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/unassign": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/update-default-policies
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "admin/roles/update-default-policies": {
    requestBody: {
      content: {
        "application/json": {
          policies: components["schemas"]["RolePolicies"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * admin/roles/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "admin/roles/users": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              id: components["schemas"]["MisskeyId"];
              createdAt?: unknown;
              user: components["schemas"]["UserDetailed"];
              expiresAt?: unknown;
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * announcements
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  announcements: {
    requestBody: {
      content: {
        "application/json": {
          limit?: number;
          /** @default false */
          withUnreads?: boolean;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ({
              id: components["schemas"]["MisskeyId"];
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string | null;
              title: string;
              text: string;
              imageUrl: string | null;
              isRead?: boolean;
              [key: string]: unknown;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * antennas/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "antennas/create": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** @enum {string} */
          src: "home" | "all" | "users" | "list";
          userListId?: components["schemas"]["MisskeyId"];
          keywords: string[][];
          excludeKeywords: string[][];
          users: string[];
          caseSensitive: boolean;
          withReplies: boolean;
          withFile: boolean;
          notify: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Antenna"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * antennas/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "antennas/delete": {
    requestBody: {
      content: {
        "application/json": {
          antennaId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * antennas/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "antennas/list": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Antenna"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * antennas/notes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "antennas/notes": {
    requestBody: {
      content: {
        "application/json": {
          antennaId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * antennas/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "antennas/show": {
    requestBody: {
      content: {
        "application/json": {
          antennaId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Antenna"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * antennas/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "antennas/update": {
    requestBody: {
      content: {
        "application/json": {
          antennaId: components["schemas"]["MisskeyId"];
          name: string;
          /** @enum {string} */
          src: "home" | "all" | "users" | "list";
          userListId?: components["schemas"]["MisskeyId"];
          keywords: string[][];
          excludeKeywords: string[][];
          users: string[];
          caseSensitive: boolean;
          withReplies: boolean;
          withFile: boolean;
          notify: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Antenna"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * ap/get
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "ap/get": {
    requestBody: {
      content: {
        "application/json": {
          uri: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * ap/show
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "ap/show": {
    requestBody: {
      content: {
        "application/json": {
          uri: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": ({
            /** @enum {string} */
            type: "User";
            object: components["schemas"]["UserDetailedNotMe"];
            [key: string]: unknown;
          } | {
            /** @enum {string} */
            type: "Note";
            object: components["schemas"]["Note"];
            [key: string]: unknown;
          }) | null;
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * app/create
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "app/create": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description: string;
          permission: string[];
          callbackUrl?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["App"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * app/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "app/show": {
    requestBody: {
      content: {
        "application/json": {
          appId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["App"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * auth/session/generate
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "auth/session/generate": {
    requestBody: {
      content: {
        "application/json": {
          appSecret: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            token: string;
            url: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * auth/session/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "auth/session/show": {
    requestBody: {
      content: {
        "application/json": {
          token: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            id: components["schemas"]["MisskeyId"];
            app: components["schemas"]["App"];
            token: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * auth/session/userkey
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "auth/session/userkey": {
    requestBody: {
      content: {
        "application/json": {
          appSecret: string;
          token: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            accessToken: string;
            user: components["schemas"]["UserDetailedNotMe"];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * blocking/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:blocks*
   */
  "blocking/create": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailedNotMe"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * blocking/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:blocks*
   */
  "blocking/delete": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailedNotMe"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * blocking/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:blocks*
   */
  "blocking/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 30 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Blocking"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  "channels/create": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description?: string | null;
          bannerId?: components["schemas"]["MisskeyId"];
          color?: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "channels/featured": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/follow
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  "channels/follow": {
    requestBody: {
      content: {
        "application/json": {
          channelId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/followed
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:channels*
   */
  "channels/followed": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 5 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/owned
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:channels*
   */
  "channels/owned": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 5 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "channels/show": {
    requestBody: {
      content: {
        "application/json": {
          channelId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/timeline
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "channels/timeline": {
    requestBody: {
      content: {
        "application/json": {
          channelId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/unfollow
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  "channels/unfollow": {
    requestBody: {
      content: {
        "application/json": {
          channelId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  "channels/update": {
    requestBody: {
      content: {
        "application/json": {
          channelId: components["schemas"]["MisskeyId"];
          name?: string;
          description?: string | null;
          bannerId?: components["schemas"]["MisskeyId"];
          isArchived?: boolean | null;
          pinnedNoteIds?: components["schemas"]["MisskeyId"][];
          color?: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/favorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  "channels/favorite": {
    requestBody: {
      content: {
        "application/json": {
          channelId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/unfavorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  "channels/unfavorite": {
    requestBody: {
      content: {
        "application/json": {
          channelId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/my-favorites
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:channels*
   */
  "channels/my-favorites": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * channels/search
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "channels/search": {
    requestBody: {
      content: {
        "application/json": {
          query: string;
          /**
           * @default nameAndDescription
           * @enum {string}
           */
          type?: "nameAndDescription" | "nameOnly";
          /** @default 5 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Channel"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/active-users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/active-users": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            readWrite?: number[];
            read?: number[];
            write?: number[];
            registeredWithinWeek?: number[];
            registeredWithinMonth?: number[];
            registeredWithinYear?: number[];
            registeredOutsideWeek?: number[];
            registeredOutsideMonth?: number[];
            registeredOutsideYear?: number[];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/ap-request
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/ap-request": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            deliverFailed: number[];
            deliverSucceeded: number[];
            inboxReceived: number[];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/drive
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/drive": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            local: {
              incCount?: number[];
              incSize?: number[];
              decCount?: number[];
              decSize?: number[];
              [key: string]: unknown;
            };
            remote: {
              incCount?: number[];
              incSize?: number[];
              decCount?: number[];
              decSize?: number[];
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/federation
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/federation": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            deliveredInstances: number[];
            inboxInstances: number[];
            stalled: number[];
            sub: number[];
            pub: number[];
            pubsub: number[];
            subActive: number[];
            pubActive: number[];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/instance
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/instance": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          host: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            requests: {
              failed: number[];
              succeeded: number[];
              received: number[];
              [key: string]: unknown;
            };
            notes: {
              total: number[];
              inc: number[];
              dec: number[];
              diffs: {
                normal: number[];
                reply: number[];
                renote: number[];
                withFile: number[];
                [key: string]: unknown;
              };
              [key: string]: unknown;
            };
            users: {
              total: number[];
              inc: number[];
              dec: number[];
              [key: string]: unknown;
            };
            following: {
              total: number[];
              inc: number[];
              dec: number[];
              [key: string]: unknown;
            };
            followers: {
              total: number[];
              inc: number[];
              dec: number[];
              [key: string]: unknown;
            };
            drive: {
              totalFiles: number[];
              incFiles: number[];
              decFiles: number[];
              incUsage: number[];
              decUsage: number[];
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/notes": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            local: {
              total: number[];
              inc: number[];
              dec: number[];
              diffs: {
                normal: number[];
                reply: number[];
                renote: number[];
                withFile: number[];
                [key: string]: unknown;
              };
              [key: string]: unknown;
            };
            remote: {
              total: number[];
              inc: number[];
              dec: number[];
              diffs: {
                normal: number[];
                reply: number[];
                renote: number[];
                withFile: number[];
                [key: string]: unknown;
              };
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/user/drive
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/user/drive": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            totalCount: number[];
            totalSize: number[];
            incCount: number[];
            incSize: number[];
            decCount: number[];
            decSize: number[];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/user/following
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/user/following": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            local: {
              followings: {
                total: number[];
                inc: number[];
                dec: number[];
                [key: string]: unknown;
              };
              followers: {
                total: number[];
                inc: number[];
                dec: number[];
                [key: string]: unknown;
              };
              [key: string]: unknown;
            };
            remote: {
              followings: {
                total: number[];
                inc: number[];
                dec: number[];
                [key: string]: unknown;
              };
              followers: {
                total: number[];
                inc: number[];
                dec: number[];
                [key: string]: unknown;
              };
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/user/notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/user/notes": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            total: number[];
            inc: number[];
            dec: number[];
            diffs: {
              normal: number[];
              reply: number[];
              renote: number[];
              withFile: number[];
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/user/pv
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/user/pv": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            pv: {
              user: number[];
              visitor: number[];
              [key: string]: unknown;
            };
            upv: {
              user: number[];
              visitor: number[];
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/user/reactions
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/user/reactions": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            local: {
              count: number[];
              [key: string]: unknown;
            };
            remote: {
              count: number[];
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * charts/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "charts/users": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          span: "day" | "hour";
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            local: {
              total: number[];
              inc: number[];
              dec: number[];
              [key: string]: unknown;
            };
            remote: {
              total: number[];
              inc: number[];
              dec: number[];
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/add-note
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "clips/add-note": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/remove-note
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "clips/remove-note": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "clips/create": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** @default false */
          isPublic?: boolean;
          description?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "clips/delete": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "clips/list": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/notes
   * @description No description provided.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  "clips/notes": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/show
   * @description No description provided.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  "clips/show": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "clips/update": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          name: string;
          isPublic?: boolean;
          description?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/favorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
   */
  "clips/favorite": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/unfavorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
   */
  "clips/unfavorite": {
    requestBody: {
      content: {
        "application/json": {
          clipId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * clips/my-favorites
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:clip-favorite*
   */
  "clips/my-favorites": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  drive: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            capacity: number;
            usage: number;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/files": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default null */
          folderId?: components["schemas"]["MisskeyId"];
          type?: string | null;
          /** @enum {string} */
          sort?: "+createdAt" | "-createdAt" | "+name" | "-name" | "+size" | "-size";
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/attached-notes
   * @description Find the notes to which the given file is attached.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/files/attached-notes": {
    requestBody: {
      content: {
        "application/json": {
          fileId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/check-existence
   * @description Check if a given file exists.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/files/check-existence": {
    requestBody: {
      content: {
        "application/json": {
          md5: components["schemas"]["MD5"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/create
   * @description Upload a new drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  "drive/files/create": {
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @default null */
          folderId?: components["schemas"]["MisskeyId"];
          /** @default null */
          name?: string | null;
          /** @default null */
          comment?: string | null;
          /** @default false */
          isSensitive?: boolean;
          /** @default false */
          force?: boolean;
          /**
           * Format: binary
           * @description The file contents.
           */
          file: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/delete
   * @description Delete an existing drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  "drive/files/delete": {
    requestBody: {
      content: {
        "application/json": {
          fileId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/find-by-hash
   * @description Search for a drive file by a hash of the contents.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/files/find-by-hash": {
    requestBody: {
      content: {
        "application/json": {
          md5: components["schemas"]["MD5"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/find
   * @description Search for a drive file by the given parameters.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/files/find": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** @default null */
          folderId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/show
   * @description Show the properties of a drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/files/show": {
    requestBody: {
      content: {
        "application/json": {
          fileId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        } | {
          url: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/update
   * @description Update the properties of a drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  "drive/files/update": {
    requestBody: {
      content: {
        "application/json": {
          fileId: components["schemas"]["MisskeyId"];
          folderId?: components["schemas"]["MisskeyId"];
          name?: string;
          isSensitive?: boolean;
          comment?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/files/upload-from-url
   * @description Request the server to download a new drive file from the specified URL.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  "drive/files/upload-from-url": {
    requestBody: {
      content: {
        "application/json": {
          url: string;
          /** @default null */
          folderId?: components["schemas"]["MisskeyId"];
          /** @default false */
          isSensitive?: boolean;
          /** @default null */
          comment?: string | null;
          /** @default null */
          marker?: string | null;
          /** @default false */
          force?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/folders
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/folders": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default null */
          folderId?: components["schemas"]["MisskeyId"];
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFolder"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/folders/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  "drive/folders/create": {
    requestBody: {
      content: {
        "application/json": {
          /** @default Untitled */
          name?: string;
          parentId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFolder"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/folders/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  "drive/folders/delete": {
    requestBody: {
      content: {
        "application/json": {
          folderId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/folders/find
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/folders/find": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** @default null */
          parentId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFolder"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/folders/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/folders/show": {
    requestBody: {
      content: {
        "application/json": {
          folderId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFolder"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/folders/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  "drive/folders/update": {
    requestBody: {
      content: {
        "application/json": {
          folderId: components["schemas"]["MisskeyId"];
          name?: string;
          parentId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFolder"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * drive/stream
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  "drive/stream": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          type?: string;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["DriveFile"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * email-address/available
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "email-address/available": {
    requestBody: {
      content: {
        "application/json": {
          emailAddress: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            available: boolean;
            reason: string | null;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * endpoint
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  endpoint: {
    requestBody: {
      content: {
        "application/json": {
          endpoint: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            spec?: unknown;
            [key: string]: unknown;
          } | null;
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * endpoints
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  endpoints: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * federation/followers
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "federation/followers": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Following"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * federation/following
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "federation/following": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Following"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * federation/instances
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "federation/instances": {
    requestBody: {
      content: {
        "application/json": {
          host?: string | null;
          blocked?: boolean | null;
          notResponding?: boolean | null;
          suspended?: boolean | null;
          federating?: boolean | null;
          subscribing?: boolean | null;
          publishing?: boolean | null;
          /** @default 30 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          sort?: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["FederationInstance"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * federation/show-instance
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "federation/show-instance": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["FederationInstance"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * federation/update-remote-user
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "federation/update-remote-user": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * federation/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "federation/users": {
    requestBody: {
      content: {
        "application/json": {
          host: string;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailedNotMe"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * federation/stats
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "federation/stats": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            topSubInstances: unknown[];
            otherFollowersCount: number;
            topPubInstances: unknown[];
            otherFollowingCount: number;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * following/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  "following/create": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserLite"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * following/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  "following/delete": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserLite"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * following/invalidate
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  "following/invalidate": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserLite"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * following/requests/accept
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  "following/requests/accept": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * following/requests/cancel
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  "following/requests/cancel": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserLite"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * following/requests/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:following*
   */
  "following/requests/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              id: components["schemas"]["MisskeyId"];
              follower: components["schemas"]["UserLite"];
              followee: components["schemas"]["UserLite"];
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * following/requests/reject
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  "following/requests/reject": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "gallery/featured": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/popular
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "gallery/popular": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/posts
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "gallery/posts": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/posts/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery*
   */
  "gallery/posts/create": {
    requestBody: {
      content: {
        "application/json": {
          title: string;
          description?: string | null;
          fileIds: components["schemas"]["MisskeyId"][];
          /** @default false */
          isSensitive?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/posts/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery*
   */
  "gallery/posts/delete": {
    requestBody: {
      content: {
        "application/json": {
          postId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/posts/like
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
   */
  "gallery/posts/like": {
    requestBody: {
      content: {
        "application/json": {
          postId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/posts/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "gallery/posts/show": {
    requestBody: {
      content: {
        "application/json": {
          postId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/posts/unlike
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
   */
  "gallery/posts/unlike": {
    requestBody: {
      content: {
        "application/json": {
          postId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * gallery/posts/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery*
   */
  "gallery/posts/update": {
    requestBody: {
      content: {
        "application/json": {
          postId: components["schemas"]["MisskeyId"];
          title: string;
          description?: string | null;
          fileIds: components["schemas"]["MisskeyId"][];
          /** @default false */
          isSensitive?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * get-online-users-count
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "get-online-users-count": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            count: number;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * hashtags/list
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "hashtags/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default false */
          attachedToUserOnly?: boolean;
          /** @default false */
          attachedToLocalUserOnly?: boolean;
          /** @default false */
          attachedToRemoteUserOnly?: boolean;
          /** @enum {string} */
          sort: "+mentionedUsers" | "-mentionedUsers" | "+mentionedLocalUsers" | "-mentionedLocalUsers" | "+mentionedRemoteUsers" | "-mentionedRemoteUsers" | "+attachedUsers" | "-attachedUsers" | "+attachedLocalUsers" | "-attachedLocalUsers" | "+attachedRemoteUsers" | "-attachedRemoteUsers";
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Hashtag"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * hashtags/search
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "hashtags/search": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          query: string;
          /** @default 0 */
          offset?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * hashtags/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "hashtags/show": {
    requestBody: {
      content: {
        "application/json": {
          tag: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Hashtag"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * hashtags/trend
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "hashtags/trend": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              tag: string;
              chart: number[];
              usersCount: number;
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * hashtags/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "hashtags/users": {
    requestBody: {
      content: {
        "application/json": {
          tag: string;
          /** @default 10 */
          limit?: number;
          /** @enum {string} */
          sort: "+follower" | "-follower" | "+createdAt" | "-createdAt" | "+updatedAt" | "-updatedAt";
          /**
           * @default all
           * @enum {string}
           */
          state?: "all" | "alive";
          /**
           * @default local
           * @enum {string}
           */
          origin?: "combined" | "local" | "remote";
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  i: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["MeDetailed"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/claim-achievement
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "i/claim-achievement": {
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          name: "notes1" | "notes10" | "notes100" | "notes500" | "notes1000" | "notes5000" | "notes10000" | "notes20000" | "notes30000" | "notes40000" | "notes50000" | "notes60000" | "notes70000" | "notes80000" | "notes90000" | "notes100000" | "login3" | "login7" | "login15" | "login30" | "login60" | "login100" | "login200" | "login300" | "login400" | "login500" | "login600" | "login700" | "login800" | "login900" | "login1000" | "passedSinceAccountCreated1" | "passedSinceAccountCreated2" | "passedSinceAccountCreated3" | "loggedInOnBirthday" | "loggedInOnNewYearsDay" | "noteClipped1" | "noteFavorited1" | "myNoteFavorited1" | "profileFilled" | "markedAsCat" | "following1" | "following10" | "following50" | "following100" | "following300" | "followers1" | "followers10" | "followers50" | "followers100" | "followers300" | "followers500" | "followers1000" | "collectAchievements30" | "viewAchievements3min" | "iLoveMisskey" | "foundTreasure" | "client30min" | "client60min" | "noteDeletedWithin1min" | "postedAtLateNight" | "postedAt0min0sec" | "selfQuote" | "htl20npm" | "viewInstanceChart" | "outputHelloWorldOnScratchpad" | "open3windows" | "driveFolderCircularReference" | "reactWithoutRead" | "clickedClickHere" | "justPlainLucky" | "setNameToSyuilo" | "cookieClicked" | "brainDiver";
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/favorites
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:favorites*
   */
  "i/favorites": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["NoteFavorite"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/gallery/likes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:gallery-likes*
   */
  "i/gallery/likes": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              id: components["schemas"]["MisskeyId"];
              post: components["schemas"]["GalleryPost"];
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/gallery/posts
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:gallery*
   */
  "i/gallery/posts": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/get-word-muted-notes-count
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "i/get-word-muted-notes-count": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            count: number;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/notifications
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:notifications*
   */
  "i/notifications": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default true */
          markAsRead?: boolean;
          includeTypes?: ("follow" | "mention" | "reply" | "renote" | "quote" | "reaction" | "pollEnded" | "receiveFollowRequest" | "followRequestAccepted" | "achievementEarned" | "app" | "pollVote" | "groupInvited")[];
          excludeTypes?: ("follow" | "mention" | "reply" | "renote" | "quote" | "reaction" | "pollEnded" | "receiveFollowRequest" | "followRequestAccepted" | "achievementEarned" | "app" | "pollVote" | "groupInvited")[];
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/page-likes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:page-likes*
   */
  "i/page-likes": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              id: components["schemas"]["MisskeyId"];
              page: components["schemas"]["Page"];
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/pages
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:pages*
   */
  "i/pages": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Page"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/pin
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/pin": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["MeDetailed"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/read-all-unread-notes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/read-all-unread-notes": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/read-announcement
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/read-announcement": {
    requestBody: {
      content: {
        "application/json": {
          announcementId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/unpin
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/unpin": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["MeDetailed"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/update": {
    requestBody: {
      content: {
        "application/json": {
          name?: components["schemas"]["Name"];
          description?: components["schemas"]["Description"];
          location?: components["schemas"]["Location"];
          birthday?: components["schemas"]["Birthday"];
          /** @enum {string|null} */
          lang?: "ach" | "ady" | "af" | "af-NA" | "af-ZA" | "ak" | "ar" | "ar-AR" | "ar-MA" | "ar-SA" | "ay-BO" | "az" | "az-AZ" | "be-BY" | "bg" | "bg-BG" | "bn" | "bn-IN" | "bn-BD" | "br" | "bs-BA" | "ca" | "ca-ES" | "cak" | "ck-US" | "cs" | "cs-CZ" | "cy" | "cy-GB" | "da" | "da-DK" | "de" | "de-AT" | "de-DE" | "de-CH" | "dsb" | "el" | "el-GR" | "en" | "en-GB" | "en-AU" | "en-CA" | "en-IE" | "en-IN" | "en-PI" | "en-SG" | "en-UD" | "en-US" | "en-ZA" | "en@pirate" | "eo" | "eo-EO" | "es" | "es-AR" | "es-419" | "es-CL" | "es-CO" | "es-EC" | "es-ES" | "es-LA" | "es-NI" | "es-MX" | "es-US" | "es-VE" | "et" | "et-EE" | "eu" | "eu-ES" | "fa" | "fa-IR" | "fb-LT" | "ff" | "fi" | "fi-FI" | "fo" | "fo-FO" | "fr" | "fr-CA" | "fr-FR" | "fr-BE" | "fr-CH" | "fy-NL" | "ga" | "ga-IE" | "gd" | "gl" | "gl-ES" | "gn-PY" | "gu-IN" | "gv" | "gx-GR" | "he" | "he-IL" | "hi" | "hi-IN" | "hr" | "hr-HR" | "hsb" | "ht" | "hu" | "hu-HU" | "hy" | "hy-AM" | "id" | "id-ID" | "is" | "is-IS" | "it" | "it-IT" | "ja" | "ja-JP" | "jv-ID" | "ka-GE" | "kk-KZ" | "km" | "kl" | "km-KH" | "kab" | "kn" | "kn-IN" | "ko" | "ko-KR" | "ku-TR" | "kw" | "la" | "la-VA" | "lb" | "li-NL" | "lt" | "lt-LT" | "lv" | "lv-LV" | "mai" | "mg-MG" | "mk" | "mk-MK" | "ml" | "ml-IN" | "mn-MN" | "mr" | "mr-IN" | "ms" | "ms-MY" | "mt" | "mt-MT" | "my" | "no" | "nb" | "nb-NO" | "ne" | "ne-NP" | "nl" | "nl-BE" | "nl-NL" | "nn-NO" | "oc" | "or-IN" | "pa" | "pa-IN" | "pl" | "pl-PL" | "ps-AF" | "pt" | "pt-BR" | "pt-PT" | "qu-PE" | "rm-CH" | "ro" | "ro-RO" | "ru" | "ru-RU" | "sa-IN" | "se-NO" | "sh" | "si-LK" | "sk" | "sk-SK" | "sl" | "sl-SI" | "so-SO" | "sq" | "sq-AL" | "sr" | "sr-RS" | "su" | "sv" | "sv-SE" | "sw" | "sw-KE" | "ta" | "ta-IN" | "te" | "te-IN" | "tg" | "tg-TJ" | "th" | "th-TH" | "fil" | "tlh" | "tr" | "tr-TR" | "tt-RU" | "uk" | "uk-UA" | "ur" | "ur-PK" | "uz" | "uz-UZ" | "vi" | "vi-VN" | "xh-ZA" | "yi" | "yi-DE" | "zh" | "zh-Hans" | "zh-Hant" | "zh-CN" | "zh-HK" | "zh-SG" | "zh-TW" | "zu-ZA" | null;
          avatarId?: components["schemas"]["MisskeyId"];
          bannerId?: components["schemas"]["MisskeyId"];
          fields?: {
              name: string;
              value: string;
              [key: string]: unknown;
            }[];
          isLocked?: boolean;
          isExplorable?: boolean;
          hideOnlineStatus?: boolean;
          publicReactions?: boolean;
          carefulBot?: boolean;
          autoAcceptFollowed?: boolean;
          noCrawle?: boolean;
          preventAiLearning?: boolean;
          isBot?: boolean;
          isCat?: boolean;
          injectFeaturedNote?: boolean;
          receiveAnnouncementEmail?: boolean;
          alwaysMarkNsfw?: boolean;
          autoSensitive?: boolean;
          /** @enum {string} */
          ffVisibility?: "public" | "followers" | "private";
          pinnedPageId?: components["schemas"]["MisskeyId"];
          mutedWords?: (string[] | string)[];
          mutedInstances?: string[];
          mutingNotificationTypes?: ("follow" | "mention" | "reply" | "renote" | "quote" | "reaction" | "pollEnded" | "receiveFollowRequest" | "followRequestAccepted" | "achievementEarned" | "app")[];
          emailNotificationTypes?: string[];
          alsoKnownAs?: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["MeDetailed"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/webhooks/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/webhooks/create": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          url: string;
          secret: string;
          on: ("mention" | "unfollow" | "follow" | "followed" | "note" | "reply" | "renote" | "reaction")[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/webhooks/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "i/webhooks/list": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/webhooks/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "i/webhooks/show": {
    requestBody: {
      content: {
        "application/json": {
          webhookId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/webhooks/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/webhooks/update": {
    requestBody: {
      content: {
        "application/json": {
          webhookId: components["schemas"]["MisskeyId"];
          name: string;
          url: string;
          secret: string;
          on: ("mention" | "unfollow" | "follow" | "followed" | "note" | "reply" | "renote" | "reaction")[];
          active: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * i/webhooks/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "i/webhooks/delete": {
    requestBody: {
      content: {
        "application/json": {
          webhookId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * invite/create
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "invite/create": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            code: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * invite/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "invite/delete": {
    requestBody: {
      content: {
        "application/json": {
          inviteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * invite/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "invite/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 30 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * invite/limit
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "invite/limit": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            remaining: number | null;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * meta
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  meta: {
    requestBody: {
      content: {
        "application/json": {
          /** @default true */
          detail?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            maintainerName: string | null;
            maintainerEmail: string | null;
            version: string;
            name: string | null;
            /** Format: url */
            uri: string;
            description: string | null;
            langs: string[];
            tosUrl: string | null;
            repositoryUrl: string;
            feedbackUrl: string | null;
            defaultDarkTheme: string | null;
            defaultLightTheme: string | null;
            disableRegistration: boolean;
            cacheRemoteFiles?: boolean;
            cacheRemoteSensitiveFiles?: boolean;
            emailRequiredForSignup: boolean;
            enableHcaptcha: boolean;
            hcaptchaSiteKey: string | null;
            enableRecaptcha: boolean;
            recaptchaSiteKey: string | null;
            enableTurnstile: boolean;
            turnstileSiteKey: string | null;
            swPublickey: string | null;
            mascotImageUrl: string | null;
            bannerUrl: string | null;
            serverErrorImageUrl: string | null;
            infoImageUrl: string | null;
            notFoundImageUrl: string | null;
            iconUrl: string | null;
            maxNoteTextLength: number;
            ads: {
                place: string;
                /** Format: url */
                url: string;
                /** Format: url */
                imageUrl: string;
                [key: string]: unknown;
              }[];
            requireSetup?: boolean;
            enableEmail: boolean;
            enableServiceWorker: boolean;
            translatorAvailable: boolean;
            proxyAccountName?: string | null;
            mediaProxy: string;
            features?: {
              registration: boolean;
              localTimeLine?: boolean;
              globalTimeLine?: boolean;
              hcaptcha: boolean;
              recaptcha: boolean;
              objectStorage: boolean;
              serviceWorker: boolean;
              /** @default true */
              miauth?: boolean;
              emailRequiredForSignup?: boolean;
              turnstile?: boolean;
              [key: string]: unknown;
            };
            themeColor: string | null;
            backgroundImageUrl: string | null;
            logoImageUrl: string | null;
            serverRules: string[];
            policies: {
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * emojis
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  emojis: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            emojis: components["schemas"]["EmojiSimple"][];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * emoji
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  emoji: {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["EmojiDetailed"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * mute/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  "mute/create": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          expiresAt?: number | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * mute/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  "mute/delete": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * mute/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:mutes*
   */
  "mute/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 30 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Muting"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * renote-mute/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  "renote-mute/create": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * renote-mute/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  "renote-mute/delete": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * renote-mute/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:mutes*
   */
  "renote-mute/list": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 30 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["RenoteMuting"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * my/apps
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "my/apps": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["App"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  notes: {
    requestBody: {
      content: {
        "application/json": {
          /** @default false */
          local?: boolean;
          reply?: boolean;
          renote?: boolean;
          withFiles?: boolean;
          poll?: boolean;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/children
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/children": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/clips
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/clips": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/conversation
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/conversation": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notes*
   */
  "notes/create": {
    requestBody: {
      content: {
        "application/json": ({
          channelId?: components["schemas"]["MisskeyId"];
          cw?: string | null;
          /** @default false */
          localOnly?: boolean;
          /** @default false */
          noExtractEmojis?: boolean;
          /** @default false */
          noExtractHashtags?: boolean;
          /** @default false */
          noExtractMentions?: boolean;
          /**
           * @default null
           * @enum {string|null}
           */
          reactionAcceptance?: "likeOnly" | "likeOnlyForRemote" | "nonSensitiveOnly" | "nonSensitiveOnlyForLocalLikeOnlyForRemote" | null;
          replyId?: components["schemas"]["MisskeyId"];
          /**
           * @default public
           * @enum {string}
           */
          visibility?: "followers" | "home" | "public" | "specified";
          visibleUserIds?: components["schemas"]["MisskeyId"][];
          fileIds: components["schemas"]["MisskeyId"][];
          mediaIds?: components["schemas"]["MisskeyId"][];
          poll?: ({
            choices: string[];
            expiredAfter?: number | null;
            expiresAt?: number | null;
            multiple?: boolean;
            [key: string]: unknown;
          }) | null;
          renoteId?: components["schemas"]["MisskeyId"];
          text?: string;
          [key: string]: unknown;
        }) | ({
          channelId?: components["schemas"]["MisskeyId"];
          cw?: string | null;
          /** @default false */
          localOnly?: boolean;
          /** @default false */
          noExtractEmojis?: boolean;
          /** @default false */
          noExtractHashtags?: boolean;
          /** @default false */
          noExtractMentions?: boolean;
          /**
           * @default null
           * @enum {string|null}
           */
          reactionAcceptance?: "likeOnly" | "likeOnlyForRemote" | "nonSensitiveOnly" | "nonSensitiveOnlyForLocalLikeOnlyForRemote" | null;
          replyId?: components["schemas"]["MisskeyId"];
          /**
           * @default public
           * @enum {string}
           */
          visibility?: "followers" | "home" | "public" | "specified";
          visibleUserIds?: components["schemas"]["MisskeyId"][];
          fileIds?: components["schemas"]["MisskeyId"][];
          mediaIds: components["schemas"]["MisskeyId"][];
          poll?: ({
            choices: string[];
            expiredAfter?: number | null;
            expiresAt?: number | null;
            multiple?: boolean;
            [key: string]: unknown;
          }) | null;
          renoteId?: components["schemas"]["MisskeyId"];
          text?: string;
          [key: string]: unknown;
        }) | ({
          channelId?: components["schemas"]["MisskeyId"];
          cw?: string | null;
          /** @default false */
          localOnly?: boolean;
          /** @default false */
          noExtractEmojis?: boolean;
          /** @default false */
          noExtractHashtags?: boolean;
          /** @default false */
          noExtractMentions?: boolean;
          /**
           * @default null
           * @enum {string|null}
           */
          reactionAcceptance?: "likeOnly" | "likeOnlyForRemote" | "nonSensitiveOnly" | "nonSensitiveOnlyForLocalLikeOnlyForRemote" | null;
          replyId?: components["schemas"]["MisskeyId"];
          /**
           * @default public
           * @enum {string}
           */
          visibility?: "followers" | "home" | "public" | "specified";
          visibleUserIds?: components["schemas"]["MisskeyId"][];
          fileIds?: components["schemas"]["MisskeyId"][];
          mediaIds?: components["schemas"]["MisskeyId"][];
          poll: {
            choices: string[];
            expiredAfter?: number | null;
            expiresAt?: number | null;
            multiple?: boolean;
            [key: string]: unknown;
          };
          renoteId?: components["schemas"]["MisskeyId"];
          text?: string;
          [key: string]: unknown;
        }) | ({
          channelId?: components["schemas"]["MisskeyId"];
          cw?: string | null;
          /** @default false */
          localOnly?: boolean;
          /** @default false */
          noExtractEmojis?: boolean;
          /** @default false */
          noExtractHashtags?: boolean;
          /** @default false */
          noExtractMentions?: boolean;
          /**
           * @default null
           * @enum {string|null}
           */
          reactionAcceptance?: "likeOnly" | "likeOnlyForRemote" | "nonSensitiveOnly" | "nonSensitiveOnlyForLocalLikeOnlyForRemote" | null;
          replyId?: components["schemas"]["MisskeyId"];
          /**
           * @default public
           * @enum {string}
           */
          visibility?: "followers" | "home" | "public" | "specified";
          visibleUserIds?: components["schemas"]["MisskeyId"][];
          fileIds?: components["schemas"]["MisskeyId"][];
          mediaIds?: components["schemas"]["MisskeyId"][];
          poll?: ({
            choices: string[];
            expiredAfter?: number | null;
            expiresAt?: number | null;
            multiple?: boolean;
            [key: string]: unknown;
          }) | null;
          renoteId: components["schemas"]["MisskeyId"];
          text?: string;
          [key: string]: unknown;
        }) | ({
          channelId?: components["schemas"]["MisskeyId"];
          cw?: string | null;
          /** @default false */
          localOnly?: boolean;
          /** @default false */
          noExtractEmojis?: boolean;
          /** @default false */
          noExtractHashtags?: boolean;
          /** @default false */
          noExtractMentions?: boolean;
          /**
           * @default null
           * @enum {string|null}
           */
          reactionAcceptance?: "likeOnly" | "likeOnlyForRemote" | "nonSensitiveOnly" | "nonSensitiveOnlyForLocalLikeOnlyForRemote" | null;
          replyId?: components["schemas"]["MisskeyId"];
          /**
           * @default public
           * @enum {string}
           */
          visibility?: "followers" | "home" | "public" | "specified";
          visibleUserIds?: components["schemas"]["MisskeyId"][];
          fileIds?: components["schemas"]["MisskeyId"][];
          mediaIds?: components["schemas"]["MisskeyId"][];
          poll?: ({
            choices: string[];
            expiredAfter?: number | null;
            expiresAt?: number | null;
            multiple?: boolean;
            [key: string]: unknown;
          }) | null;
          renoteId?: components["schemas"]["MisskeyId"];
          text: string;
          [key: string]: unknown;
        });
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            createdNote: components["schemas"]["Note"];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notes*
   */
  "notes/delete": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/favorites/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:favorites*
   */
  "notes/favorites/create": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/favorites/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:favorites*
   */
  "notes/favorites/delete": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/featured": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          channelId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/global-timeline
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/global-timeline": {
    requestBody: {
      content: {
        "application/json": {
          /** @default false */
          withFiles?: boolean;
          /** @default false */
          withReplies?: boolean;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/hybrid-timeline
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "notes/hybrid-timeline": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default true */
          includeMyRenotes?: boolean;
          /** @default true */
          includeRenotedMyNotes?: boolean;
          /** @default true */
          includeLocalRenotes?: boolean;
          /** @default false */
          withFiles?: boolean;
          /** @default false */
          withReplies?: boolean;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/local-timeline
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/local-timeline": {
    requestBody: {
      content: {
        "application/json": {
          /** @default false */
          withFiles?: boolean;
          /** @default false */
          withReplies?: boolean;
          fileType?: string[];
          /** @default false */
          excludeNsfw?: boolean;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/mentions
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "notes/mentions": {
    requestBody: {
      content: {
        "application/json": {
          /** @default false */
          following?: boolean;
          /** @default 10 */
          limit?: number;
          /** @enum {string} */
          visibility?: "public" | "home" | "followers" | "specified";
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/polls/recommendation
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "notes/polls/recommendation": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/polls/vote
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:votes*
   */
  "notes/polls/vote": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          choice: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/reactions
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/reactions": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          type?: string | null;
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["NoteReaction"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/reactions/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:reactions*
   */
  "notes/reactions/create": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          reaction: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/reactions/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:reactions*
   */
  "notes/reactions/delete": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/renotes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/renotes": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/replies
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/replies": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/search-by-tag
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/search-by-tag": {
    requestBody: {
      content: {
        "application/json": ({
          /** @default null */
          reply?: boolean | null;
          /** @default null */
          renote?: boolean | null;
          /** @default false */
          withFiles?: boolean;
          /** @default null */
          poll?: boolean | null;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          tag: string;
          [key: string]: unknown;
        }) | ({
          /** @default null */
          reply?: boolean | null;
          /** @default null */
          renote?: boolean | null;
          /** @default false */
          withFiles?: boolean;
          /** @default null */
          poll?: boolean | null;
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          /** @description The outer arrays are chained with OR, the inner arrays are chained with AND. */
          query: string[][];
          [key: string]: unknown;
        });
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/search
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/search": {
    requestBody: {
      content: {
        "application/json": {
          query: string;
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          host?: string;
          /** @default null */
          userId?: components["schemas"]["MisskeyId"];
          /** @default null */
          channelId?: components["schemas"]["MisskeyId"];
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/show": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/state
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "notes/state": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            isFavorited: boolean;
            isMutedThread: boolean;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/thread-muting/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "notes/thread-muting/create": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/thread-muting/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "notes/thread-muting/delete": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/timeline
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "notes/timeline": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default true */
          includeMyRenotes?: boolean;
          /** @default true */
          includeRenotedMyNotes?: boolean;
          /** @default true */
          includeLocalRenotes?: boolean;
          /** @default false */
          withFiles?: boolean;
          /** @default false */
          withReplies?: boolean;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/translate
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "notes/translate": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          targetLang: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": number | {
            sourceLang: string;
            text: string;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/unrenote
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notes*
   */
  "notes/unrenote": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notes/user-list-timeline
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "notes/user-list-timeline": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          /** @default true */
          includeMyRenotes?: boolean;
          /** @default true */
          includeRenotedMyNotes?: boolean;
          /** @default true */
          includeLocalRenotes?: boolean;
          /** @default false */
          withFiles?: boolean;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notifications/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notifications*
   */
  "notifications/create": {
    requestBody: {
      content: {
        "application/json": {
          body: string;
          header?: string | null;
          icon?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * notifications/mark-all-as-read
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notifications*
   */
  "notifications/mark-all-as-read": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pages/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:pages*
   */
  "pages/create": {
    requestBody: {
      content: {
        "application/json": {
          title: string;
          name: string;
          summary?: string | null;
          content: components["schemas"]["PageContent"];
          variables: unknown[];
          script: string;
          eyeCatchingImageId?: components["schemas"]["MisskeyId"];
          /**
           * @default sans-serif
           * @enum {string}
           */
          font?: "serif" | "sans-serif";
          /** @default false */
          alignCenter?: boolean;
          /** @default false */
          hideTitleWhenPinned?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Page"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pages/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:pages*
   */
  "pages/delete": {
    requestBody: {
      content: {
        "application/json": {
          pageId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pages/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "pages/featured": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Page"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pages/like
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:page-likes*
   */
  "pages/like": {
    requestBody: {
      content: {
        "application/json": {
          pageId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pages/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "pages/show": {
    requestBody: {
      content: {
        "application/json": {
          pageId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        } | {
          name: string;
          username: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Page"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pages/unlike
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:page-likes*
   */
  "pages/unlike": {
    requestBody: {
      content: {
        "application/json": {
          pageId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pages/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:pages*
   */
  "pages/update": {
    requestBody: {
      content: {
        "application/json": {
          pageId: components["schemas"]["MisskeyId"];
          title: string;
          name: string;
          summary?: string | null;
          content: components["schemas"]["PageContent"];
          variables: unknown[];
          script: string;
          eyeCatchingImageId?: components["schemas"]["MisskeyId"];
          /**
           * @default sans-serif
           * @enum {string}
           */
          font?: "serif" | "sans-serif";
          alignCenter?: boolean;
          hideTitleWhenPinned?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash*
   */
  "flash/create": {
    requestBody: {
      content: {
        "application/json": {
          title: string;
          summary: string;
          script: string;
          permissions: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash*
   */
  "flash/delete": {
    requestBody: {
      content: {
        "application/json": {
          flashId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "flash/featured": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Flash"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/like
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
   */
  "flash/like": {
    requestBody: {
      content: {
        "application/json": {
          flashId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "flash/show": {
    requestBody: {
      content: {
        "application/json": {
          flashId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Flash"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/unlike
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
   */
  "flash/unlike": {
    requestBody: {
      content: {
        "application/json": {
          flashId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash*
   */
  "flash/update": {
    requestBody: {
      content: {
        "application/json": {
          flashId: components["schemas"]["MisskeyId"];
          title: string;
          summary: string;
          script: string;
          permissions: string[];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/my
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:flash*
   */
  "flash/my": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Flash"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * flash/my-likes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:flash-likes*
   */
  "flash/my-likes": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              id: string;
              flash: components["schemas"]["Flash"];
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * ping
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  ping: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            pong: number;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * pinned-users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "pinned-users": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * promo/read
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "promo/read": {
    requestBody: {
      content: {
        "application/json": {
          noteId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * roles/list
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "roles/list": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * roles/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "roles/show": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * roles/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "roles/users": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              id: components["schemas"]["MisskeyId"];
              user: components["schemas"]["UserDetailed"];
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * roles/notes
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "roles/notes": {
    requestBody: {
      content: {
        "application/json": {
          roleId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * request-reset-password
   * @description Request a users password to be reset.
   *
   * **Credential required**: *No*
   */
  "request-reset-password": {
    requestBody: {
      content: {
        "application/json": {
          username: string;
          email: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * reset-db
   * @description Only available when running with <code>NODE_ENV=testing</code>. Reset the database and flush Redis.
   *
   * **Credential required**: *No*
   */
  "reset-db": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * reset-password
   * @description Complete the password reset that was previously requested.
   *
   * **Credential required**: *No*
   */
  "reset-password": {
    requestBody: {
      content: {
        "application/json": {
          token: string;
          password: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * server-info
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "server-info": {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            machine: string;
            cpu: {
              model: string;
              cores: number;
              [key: string]: unknown;
            };
            mem: {
              total: number;
              [key: string]: unknown;
            };
            fs: {
              total: number;
              used: number;
              [key: string]: unknown;
            };
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * stats
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  stats: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            notesCount: number;
            originalNotesCount: number;
            usersCount: number;
            originalUsersCount: number;
            instances: number;
            driveUsageLocal: number;
            driveUsageRemote: number;
            reactionsCount: number;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * sw/show-registration
   * @description Check push notification registration exists.
   *
   * **Credential required**: *Yes*
   */
  "sw/show-registration": {
    requestBody: {
      content: {
        "application/json": {
          endpoint: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            userId: string;
            endpoint: string;
            sendReadMessage: boolean;
            [key: string]: unknown;
          } | null;
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * sw/update-registration
   * @description Update push notification registration.
   *
   * **Credential required**: *Yes*
   */
  "sw/update-registration": {
    requestBody: {
      content: {
        "application/json": {
          endpoint: string;
          sendReadMessage?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            userId: string;
            endpoint: string;
            sendReadMessage: boolean;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * sw/register
   * @description Register to receive push notifications.
   *
   * **Credential required**: *Yes*
   */
  "sw/register": {
    requestBody: {
      content: {
        "application/json": {
          endpoint: string;
          auth: string;
          publickey: string;
          /** @default false */
          sendReadMessage?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            /** @enum {string} */
            state?: "already-subscribed" | "subscribed";
            key: string | null;
            userId: string;
            endpoint: string;
            sendReadMessage: boolean;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * sw/unregister
   * @description Unregister from receiving push notifications.
   *
   * **Credential required**: *No*
   */
  "sw/unregister": {
    requestBody: {
      content: {
        "application/json": {
          endpoint: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * test
   * @description Endpoint for testing input validation.
   *
   * **Credential required**: *No*
   */
  test: {
    requestBody: {
      content: {
        "application/json": {
          required: boolean;
          string?: string;
          /** @default hello */
          default?: string;
          /** @default hello */
          nullableDefault?: string | null;
          id?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            required: boolean;
            string?: string;
            /** @default hello */
            default?: string;
            /** @default hello */
            nullableDefault?: string | null;
            id?: components["schemas"]["MisskeyId"];
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * username/available
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "username/available": {
    requestBody: {
      content: {
        "application/json": {
          username: components["schemas"]["LocalUsername"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            available: boolean;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  users: {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** @enum {string} */
          sort?: "+follower" | "-follower" | "+createdAt" | "-createdAt" | "+updatedAt" | "-updatedAt";
          /**
           * @default all
           * @enum {string}
           */
          state?: "all" | "alive";
          /**
           * @default local
           * @enum {string}
           */
          origin?: "combined" | "local" | "remote";
          /** @default null */
          hostname?: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/clips
   * @description Show all clips this user owns.
   *
   * **Credential required**: *No*
   */
  "users/clips": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Clip"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/followers
   * @description Show everyone that follows this user.
   *
   * **Credential required**: *No*
   */
  "users/followers": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        } | ({
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          username: string;
          host: string | null;
          [key: string]: unknown;
        });
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Following"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/following
   * @description Show everyone that this user is following.
   *
   * **Credential required**: *No*
   */
  "users/following": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        } | ({
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          username: string;
          host: string | null;
          [key: string]: unknown;
        });
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Following"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/gallery/posts
   * @description Show all gallery posts by the given user.
   *
   * **Credential required**: *No*
   */
  "users/gallery/posts": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["GalleryPost"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/get-frequently-replied-users
   * @description Get a list of other users that the specified user frequently replies to.
   *
   * **Credential required**: *No*
   */
  "users/get-frequently-replied-users": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              user: components["schemas"]["UserDetailed"];
              weight: number;
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/create
   * @description Create a new list of users.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "users/lists/create": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/delete
   * @description Delete an existing list of users.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "users/lists/delete": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/list
   * @description Show all lists that the authenticated user has created.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  "users/lists/list": {
    requestBody: {
      content: {
        "application/json": {
          userId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/pull
   * @description Remove a user from a list.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "users/lists/pull": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/push
   * @description Add a user to an existing list.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "users/lists/push": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/show
   * @description Show the properties of a list.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  "users/lists/show": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          /** @default false */
          forPublic?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            id: components["schemas"]["MisskeyId"];
            /** Format: date-time */
            createdAt: string;
            name: string;
            userIds?: components["schemas"]["MisskeyId"][];
            isPublic: boolean;
            likedCount?: number;
            isLiked?: boolean;
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/favorite
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "users/lists/favorite": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/unfavorite
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "users/lists/unfavorite": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/update
   * @description Update the properties of a list.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "users/lists/update": {
    requestBody: {
      content: {
        "application/json": {
          listId: components["schemas"]["MisskeyId"];
          name?: string;
          isPublic?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/lists/create-from-public
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "users/lists/create-from-public": {
    requestBody: {
      content: {
        "application/json": {
          name: string;
          listId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/notes
   * @description Show all notes that this user created.
   *
   * **Credential required**: *No*
   */
  "users/notes": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          /** @default true */
          includeReplies?: boolean;
          /** @default 10 */
          limit?: number;
          /** @default true */
          includeMyRenotes?: boolean;
          /** @default false */
          withFiles?: boolean;
          fileType?: string[];
          /** @default false */
          excludeNsfw?: boolean;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Note"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/pages
   * @description Show all pages this user created.
   *
   * **Credential required**: *No*
   */
  "users/pages": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["Page"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/reactions
   * @description Show all reactions this user made.
   *
   * **Credential required**: *No*
   */
  "users/reactions": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          /** @default 10 */
          limit?: number;
          sinceId?: components["schemas"]["MisskeyId"];
          untilId?: components["schemas"]["MisskeyId"];
          sinceDate?: number;
          untilDate?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["NoteReaction"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/recommendation
   * @description Show users that the authenticated user might be interested to follow.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  "users/recommendation": {
    requestBody: {
      content: {
        "application/json": {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/relation
   * @description Show the different kinds of relations between the authenticated user and the specified user(s).
   *
   * **Credential required**: *Yes*
   */
  "users/relation": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"] | components["schemas"]["MisskeyId"][];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            hasPendingFollowRequestFromYou: boolean;
            hasPendingFollowRequestToYou: boolean;
            isBlocked: boolean;
            isBlocking: boolean;
            isFollowed: boolean;
            isFollowing: boolean;
            isMuted: boolean;
            isRenoteMuted: boolean;
            id: components["schemas"]["MisskeyId"];
            [key: string]: unknown;
          } | {
              hasPendingFollowRequestFromYou: boolean;
              hasPendingFollowRequestToYou: boolean;
              isBlocked: boolean;
              isBlocking: boolean;
              isFollowed: boolean;
              isFollowing: boolean;
              isMuted: boolean;
              isRenoteMuted: boolean;
              id: components["schemas"]["MisskeyId"];
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/report-abuse
   * @description File a report.
   *
   * **Credential required**: *Yes*
   */
  "users/report-abuse": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          comment: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/search-by-username-and-host
   * @description Search for a user by username and/or host.
   *
   * **Credential required**: *No*
   */
  "users/search-by-username-and-host": {
    requestBody: {
      content: {
        "application/json": ({
          /** @default 10 */
          limit?: number;
          /** @default true */
          detail?: boolean;
          username: string | null;
          [key: string]: unknown;
        }) | ({
          /** @default 10 */
          limit?: number;
          /** @default true */
          detail?: boolean;
          host: string | null;
          [key: string]: unknown;
        });
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/search
   * @description Search for users.
   *
   * **Credential required**: *No*
   */
  "users/search": {
    requestBody: {
      content: {
        "application/json": {
          query: string;
          /** @default 0 */
          offset?: number;
          /** @default 10 */
          limit?: number;
          /**
           * @default combined
           * @enum {string}
           */
          origin?: "local" | "remote" | "combined";
          /** @default true */
          detail?: boolean;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/show
   * @description Show the properties of a user.
   *
   * **Credential required**: *No*
   */
  "users/show": {
    requestBody: {
      content: {
        "application/json": ({
          host?: string | null;
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        }) | ({
          host?: string | null;
          userIds: components["schemas"]["MisskeyId"][];
          [key: string]: unknown;
        }) | ({
          host?: string | null;
          username: string;
          [key: string]: unknown;
        });
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": components["schemas"]["UserDetailed"] | components["schemas"]["UserDetailed"][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/achievements
   * @description No description provided.
   *
   * **Credential required**: *Yes*
   */
  "users/achievements": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * users/update-memo
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  "users/update-memo": {
    requestBody: {
      content: {
        "application/json": {
          userId: components["schemas"]["MisskeyId"];
          memo: string | null;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: never;
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * fetch-rss
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  "fetch-rss": {
    requestBody: {
      content: {
        "application/json": {
          url: string;
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * retention
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  retention: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          "application/json": {
              /** Format: date-time */
              createdAt: string;
              users: number;
              [key: string]: unknown;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
